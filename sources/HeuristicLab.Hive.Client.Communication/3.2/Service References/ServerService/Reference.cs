//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HeuristicLab.Hive.Client.Communication.ServerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerService.IClientFacade")]
    public interface IClientFacade {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCommunicator/Login", ReplyAction="http://tempuri.org/IClientCommunicator/LoginResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponseHB))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponseJob))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponseSerializedJob))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponseResultReceived))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponsePlugin))]
        HeuristicLab.Hive.Contracts.Response Login(HeuristicLab.Hive.Contracts.BusinessObjects.ClientInfo clientInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientCommunicator/Login", ReplyAction="http://tempuri.org/IClientCommunicator/LoginResponse")]
        System.IAsyncResult BeginLogin(HeuristicLab.Hive.Contracts.BusinessObjects.ClientInfo clientInfo, System.AsyncCallback callback, object asyncState);
        
        HeuristicLab.Hive.Contracts.Response EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCommunicator/ProcessHeartBeat", ReplyAction="http://tempuri.org/IClientCommunicator/ProcessHeartBeatResponse")]
        HeuristicLab.Hive.Contracts.ResponseHB ProcessHeartBeat(HeuristicLab.Hive.Contracts.BusinessObjects.HeartBeatData hbData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientCommunicator/ProcessHeartBeat", ReplyAction="http://tempuri.org/IClientCommunicator/ProcessHeartBeatResponse")]
        System.IAsyncResult BeginProcessHeartBeat(HeuristicLab.Hive.Contracts.BusinessObjects.HeartBeatData hbData, System.AsyncCallback callback, object asyncState);
        
        HeuristicLab.Hive.Contracts.ResponseHB EndProcessHeartBeat(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCommunicator/SendJob", ReplyAction="http://tempuri.org/IClientCommunicator/SendJobResponse")]
        HeuristicLab.Hive.Contracts.ResponseJob SendJob(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientCommunicator/SendJob", ReplyAction="http://tempuri.org/IClientCommunicator/SendJobResponse")]
        System.IAsyncResult BeginSendJob(System.Guid clientId, System.AsyncCallback callback, object asyncState);
        
        HeuristicLab.Hive.Contracts.ResponseJob EndSendJob(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCommunicator/SendSerializedJob", ReplyAction="http://tempuri.org/IClientCommunicator/SendSerializedJobResponse")]
        HeuristicLab.Hive.Contracts.ResponseSerializedJob SendSerializedJob(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientCommunicator/SendSerializedJob", ReplyAction="http://tempuri.org/IClientCommunicator/SendSerializedJobResponse")]
        System.IAsyncResult BeginSendSerializedJob(System.Guid clientId, System.AsyncCallback callback, object asyncState);
        
        HeuristicLab.Hive.Contracts.ResponseSerializedJob EndSendSerializedJob(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCommunicator/StoreFinishedJobResult", ReplyAction="http://tempuri.org/IClientCommunicator/StoreFinishedJobResultResponse")]
        HeuristicLab.Hive.Contracts.ResponseResultReceived StoreFinishedJobResult(System.Guid clientId, System.Guid jobId, byte[] result, double percentage, System.Exception exception);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientCommunicator/StoreFinishedJobResult", ReplyAction="http://tempuri.org/IClientCommunicator/StoreFinishedJobResultResponse")]
        System.IAsyncResult BeginStoreFinishedJobResult(System.Guid clientId, System.Guid jobId, byte[] result, double percentage, System.Exception exception, System.AsyncCallback callback, object asyncState);
        
        HeuristicLab.Hive.Contracts.ResponseResultReceived EndStoreFinishedJobResult(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCommunicator/ProcessSnapshot", ReplyAction="http://tempuri.org/IClientCommunicator/ProcessSnapshotResponse")]
        HeuristicLab.Hive.Contracts.ResponseResultReceived ProcessSnapshot(System.Guid clientId, System.Guid jobId, byte[] result, double percentage, System.Exception exception);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientCommunicator/ProcessSnapshot", ReplyAction="http://tempuri.org/IClientCommunicator/ProcessSnapshotResponse")]
        System.IAsyncResult BeginProcessSnapshot(System.Guid clientId, System.Guid jobId, byte[] result, double percentage, System.Exception exception, System.AsyncCallback callback, object asyncState);
        
        HeuristicLab.Hive.Contracts.ResponseResultReceived EndProcessSnapshot(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCommunicator/Logout", ReplyAction="http://tempuri.org/IClientCommunicator/LogoutResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponseHB))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponseJob))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponseSerializedJob))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponseResultReceived))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponsePlugin))]
        HeuristicLab.Hive.Contracts.Response Logout(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientCommunicator/Logout", ReplyAction="http://tempuri.org/IClientCommunicator/LogoutResponse")]
        System.IAsyncResult BeginLogout(System.Guid clientId, System.AsyncCallback callback, object asyncState);
        
        HeuristicLab.Hive.Contracts.Response EndLogout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCommunicator/IsJobStillNeeded", ReplyAction="http://tempuri.org/IClientCommunicator/IsJobStillNeededResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponseHB))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponseJob))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponseSerializedJob))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponseResultReceived))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HeuristicLab.Hive.Contracts.ResponsePlugin))]
        HeuristicLab.Hive.Contracts.Response IsJobStillNeeded(System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientCommunicator/IsJobStillNeeded", ReplyAction="http://tempuri.org/IClientCommunicator/IsJobStillNeededResponse")]
        System.IAsyncResult BeginIsJobStillNeeded(System.Guid jobId, System.AsyncCallback callback, object asyncState);
        
        HeuristicLab.Hive.Contracts.Response EndIsJobStillNeeded(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCommunicator/SendPlugins", ReplyAction="http://tempuri.org/IClientCommunicator/SendPluginsResponse")]
        HeuristicLab.Hive.Contracts.ResponsePlugin SendPlugins(HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientCommunicator/SendPlugins", ReplyAction="http://tempuri.org/IClientCommunicator/SendPluginsResponse")]
        System.IAsyncResult BeginSendPlugins(HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList, System.AsyncCallback callback, object asyncState);
        
        HeuristicLab.Hive.Contracts.ResponsePlugin EndSendPlugins(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientFacade/SendStreamedJob", ReplyAction="http://tempuri.org/IClientFacade/SendStreamedJobResponse")]
        System.IO.Stream SendStreamedJob(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientFacade/SendStreamedJob", ReplyAction="http://tempuri.org/IClientFacade/SendStreamedJobResponse")]
        System.IAsyncResult BeginSendStreamedJob(System.Guid clientId, System.AsyncCallback callback, object asyncState);
        
        System.IO.Stream EndSendStreamedJob(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientFacade/SendStreamedPlugins", ReplyAction="http://tempuri.org/IClientFacade/SendStreamedPluginsResponse")]
        System.IO.Stream SendStreamedPlugins(HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientFacade/SendStreamedPlugins", ReplyAction="http://tempuri.org/IClientFacade/SendStreamedPluginsResponse")]
        System.IAsyncResult BeginSendStreamedPlugins(HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList, System.AsyncCallback callback, object asyncState);
        
        System.IO.Stream EndSendStreamedPlugins(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientFacade/StoreFinishedJobResultStreamed", ReplyAction="http://tempuri.org/IClientFacade/StoreFinishedJobResultStreamedResponse")]
        HeuristicLab.Hive.Contracts.ResponseResultReceived StoreFinishedJobResultStreamed(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientFacade/StoreFinishedJobResultStreamed", ReplyAction="http://tempuri.org/IClientFacade/StoreFinishedJobResultStreamedResponse")]
        System.IAsyncResult BeginStoreFinishedJobResultStreamed(System.IO.Stream stream, System.AsyncCallback callback, object asyncState);
        
        HeuristicLab.Hive.Contracts.ResponseResultReceived EndStoreFinishedJobResultStreamed(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientFacade/ProcessSnapshotStreamed", ReplyAction="http://tempuri.org/IClientFacade/ProcessSnapshotStreamedResponse")]
        HeuristicLab.Hive.Contracts.ResponseResultReceived ProcessSnapshotStreamed(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientFacade/ProcessSnapshotStreamed", ReplyAction="http://tempuri.org/IClientFacade/ProcessSnapshotStreamedResponse")]
        System.IAsyncResult BeginProcessSnapshotStreamed(System.IO.Stream stream, System.AsyncCallback callback, object asyncState);
        
        HeuristicLab.Hive.Contracts.ResponseResultReceived EndProcessSnapshotStreamed(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IClientFacadeChannel : HeuristicLab.Hive.Client.Communication.ServerService.IClientFacade, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HeuristicLab.Hive.Contracts.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HeuristicLab.Hive.Contracts.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ProcessHeartBeatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProcessHeartBeatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HeuristicLab.Hive.Contracts.ResponseHB Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HeuristicLab.Hive.Contracts.ResponseHB)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SendJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HeuristicLab.Hive.Contracts.ResponseJob Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HeuristicLab.Hive.Contracts.ResponseJob)(this.results[0]));
            }
        }

        public byte[] Data {
          get {
            base.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[1]));
          }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SendSerializedJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendSerializedJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HeuristicLab.Hive.Contracts.ResponseSerializedJob Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HeuristicLab.Hive.Contracts.ResponseSerializedJob)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class StoreFinishedJobResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StoreFinishedJobResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HeuristicLab.Hive.Contracts.ResponseResultReceived Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HeuristicLab.Hive.Contracts.ResponseResultReceived)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ProcessSnapshotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProcessSnapshotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HeuristicLab.Hive.Contracts.ResponseResultReceived Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HeuristicLab.Hive.Contracts.ResponseResultReceived)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HeuristicLab.Hive.Contracts.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HeuristicLab.Hive.Contracts.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class IsJobStillNeededCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsJobStillNeededCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HeuristicLab.Hive.Contracts.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HeuristicLab.Hive.Contracts.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SendPluginsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendPluginsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HeuristicLab.Hive.Contracts.ResponsePlugin Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HeuristicLab.Hive.Contracts.ResponsePlugin)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SendStreamedJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendStreamedJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.IO.Stream Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.Stream)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SendStreamedPluginsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendStreamedPluginsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.IO.Stream Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.Stream)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class StoreFinishedJobResultStreamedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StoreFinishedJobResultStreamedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HeuristicLab.Hive.Contracts.ResponseResultReceived Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HeuristicLab.Hive.Contracts.ResponseResultReceived)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ProcessSnapshotStreamedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProcessSnapshotStreamedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HeuristicLab.Hive.Contracts.ResponseResultReceived Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HeuristicLab.Hive.Contracts.ResponseResultReceived)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ClientFacadeClient : System.ServiceModel.ClientBase<HeuristicLab.Hive.Client.Communication.ServerService.IClientFacade>, HeuristicLab.Hive.Client.Communication.ServerService.IClientFacade {
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginProcessHeartBeatDelegate;
        
        private EndOperationDelegate onEndProcessHeartBeatDelegate;
        
        private System.Threading.SendOrPostCallback onProcessHeartBeatCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendJobDelegate;
        
        private EndOperationDelegate onEndSendJobDelegate;
        
        private System.Threading.SendOrPostCallback onSendJobCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendSerializedJobDelegate;
        
        private EndOperationDelegate onEndSendSerializedJobDelegate;
        
        private System.Threading.SendOrPostCallback onSendSerializedJobCompletedDelegate;
        
        private BeginOperationDelegate onBeginStoreFinishedJobResultDelegate;
        
        private EndOperationDelegate onEndStoreFinishedJobResultDelegate;
        
        private System.Threading.SendOrPostCallback onStoreFinishedJobResultCompletedDelegate;
        
        private BeginOperationDelegate onBeginProcessSnapshotDelegate;
        
        private EndOperationDelegate onEndProcessSnapshotDelegate;
        
        private System.Threading.SendOrPostCallback onProcessSnapshotCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogoutDelegate;
        
        private EndOperationDelegate onEndLogoutDelegate;
        
        private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsJobStillNeededDelegate;
        
        private EndOperationDelegate onEndIsJobStillNeededDelegate;
        
        private System.Threading.SendOrPostCallback onIsJobStillNeededCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendPluginsDelegate;
        
        private EndOperationDelegate onEndSendPluginsDelegate;
        
        private System.Threading.SendOrPostCallback onSendPluginsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendStreamedJobDelegate;
        
        private EndOperationDelegate onEndSendStreamedJobDelegate;
        
        private System.Threading.SendOrPostCallback onSendStreamedJobCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendStreamedPluginsDelegate;
        
        private EndOperationDelegate onEndSendStreamedPluginsDelegate;
        
        private System.Threading.SendOrPostCallback onSendStreamedPluginsCompletedDelegate;
        
        private BeginOperationDelegate onBeginStoreFinishedJobResultStreamedDelegate;
        
        private EndOperationDelegate onEndStoreFinishedJobResultStreamedDelegate;
        
        private System.Threading.SendOrPostCallback onStoreFinishedJobResultStreamedCompletedDelegate;
        
        private BeginOperationDelegate onBeginProcessSnapshotStreamedDelegate;
        
        private EndOperationDelegate onEndProcessSnapshotStreamedDelegate;
        
        private System.Threading.SendOrPostCallback onProcessSnapshotStreamedCompletedDelegate;
        
        public ClientFacadeClient() {
        }
        
        public ClientFacadeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientFacadeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientFacadeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientFacadeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<ProcessHeartBeatCompletedEventArgs> ProcessHeartBeatCompleted;
        
        public event System.EventHandler<SendJobCompletedEventArgs> SendJobCompleted;
        
        public event System.EventHandler<SendSerializedJobCompletedEventArgs> SendSerializedJobCompleted;
        
        public event System.EventHandler<StoreFinishedJobResultCompletedEventArgs> StoreFinishedJobResultCompleted;
        
        public event System.EventHandler<ProcessSnapshotCompletedEventArgs> ProcessSnapshotCompleted;
        
        public event System.EventHandler<LogoutCompletedEventArgs> LogoutCompleted;
        
        public event System.EventHandler<IsJobStillNeededCompletedEventArgs> IsJobStillNeededCompleted;
        
        public event System.EventHandler<SendPluginsCompletedEventArgs> SendPluginsCompleted;
        
        public event System.EventHandler<SendStreamedJobCompletedEventArgs> SendStreamedJobCompleted;
        
        public event System.EventHandler<SendStreamedPluginsCompletedEventArgs> SendStreamedPluginsCompleted;
        
        public event System.EventHandler<StoreFinishedJobResultStreamedCompletedEventArgs> StoreFinishedJobResultStreamedCompleted;
        
        public event System.EventHandler<ProcessSnapshotStreamedCompletedEventArgs> ProcessSnapshotStreamedCompleted;
        
        public HeuristicLab.Hive.Contracts.Response Login(HeuristicLab.Hive.Contracts.BusinessObjects.ClientInfo clientInfo) {
            return base.Channel.Login(clientInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(HeuristicLab.Hive.Contracts.BusinessObjects.ClientInfo clientInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(clientInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HeuristicLab.Hive.Contracts.Response EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HeuristicLab.Hive.Contracts.BusinessObjects.ClientInfo clientInfo = ((HeuristicLab.Hive.Contracts.BusinessObjects.ClientInfo)(inValues[0]));
            return this.BeginLogin(clientInfo, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            HeuristicLab.Hive.Contracts.Response retVal = this.EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(HeuristicLab.Hive.Contracts.BusinessObjects.ClientInfo clientInfo) {
            this.LoginAsync(clientInfo, null);
        }
        
        public void LoginAsync(HeuristicLab.Hive.Contracts.BusinessObjects.ClientInfo clientInfo, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        clientInfo}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        public HeuristicLab.Hive.Contracts.ResponseHB ProcessHeartBeat(HeuristicLab.Hive.Contracts.BusinessObjects.HeartBeatData hbData) {
            return base.Channel.ProcessHeartBeat(hbData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProcessHeartBeat(HeuristicLab.Hive.Contracts.BusinessObjects.HeartBeatData hbData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProcessHeartBeat(hbData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HeuristicLab.Hive.Contracts.ResponseHB EndProcessHeartBeat(System.IAsyncResult result) {
            return base.Channel.EndProcessHeartBeat(result);
        }
        
        private System.IAsyncResult OnBeginProcessHeartBeat(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HeuristicLab.Hive.Contracts.BusinessObjects.HeartBeatData hbData = ((HeuristicLab.Hive.Contracts.BusinessObjects.HeartBeatData)(inValues[0]));
            return this.BeginProcessHeartBeat(hbData, callback, asyncState);
        }
        
        private object[] OnEndProcessHeartBeat(System.IAsyncResult result) {
            HeuristicLab.Hive.Contracts.ResponseHB retVal = this.EndProcessHeartBeat(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProcessHeartBeatCompleted(object state) {
            if ((this.ProcessHeartBeatCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProcessHeartBeatCompleted(this, new ProcessHeartBeatCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProcessHeartBeatAsync(HeuristicLab.Hive.Contracts.BusinessObjects.HeartBeatData hbData) {
            this.ProcessHeartBeatAsync(hbData, null);
        }
        
        public void ProcessHeartBeatAsync(HeuristicLab.Hive.Contracts.BusinessObjects.HeartBeatData hbData, object userState) {
            if ((this.onBeginProcessHeartBeatDelegate == null)) {
                this.onBeginProcessHeartBeatDelegate = new BeginOperationDelegate(this.OnBeginProcessHeartBeat);
            }
            if ((this.onEndProcessHeartBeatDelegate == null)) {
                this.onEndProcessHeartBeatDelegate = new EndOperationDelegate(this.OnEndProcessHeartBeat);
            }
            if ((this.onProcessHeartBeatCompletedDelegate == null)) {
                this.onProcessHeartBeatCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProcessHeartBeatCompleted);
            }
            base.InvokeAsync(this.onBeginProcessHeartBeatDelegate, new object[] {
                        hbData}, this.onEndProcessHeartBeatDelegate, this.onProcessHeartBeatCompletedDelegate, userState);
        }
        
        public HeuristicLab.Hive.Contracts.ResponseJob SendJob(System.Guid clientId) {
            return base.Channel.SendJob(clientId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendJob(System.Guid clientId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendJob(clientId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HeuristicLab.Hive.Contracts.ResponseJob EndSendJob(System.IAsyncResult result) {
            return base.Channel.EndSendJob(result);
        }
        
        private System.IAsyncResult OnBeginSendJob(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid clientId = ((System.Guid)(inValues[0]));
            return this.BeginSendJob(clientId, callback, asyncState);
        }
        
        private object[] OnEndSendJob(System.IAsyncResult result) {
            HeuristicLab.Hive.Contracts.ResponseJob retVal = this.EndSendJob(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendJobCompleted(object state) {
            if ((this.SendJobCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendJobCompleted(this, new SendJobCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendJobAsync(System.Guid clientId) {
            this.SendJobAsync(clientId, null);
        }
        
        public void SendJobAsync(System.Guid clientId, object userState) {
            if ((this.onBeginSendJobDelegate == null)) {
                this.onBeginSendJobDelegate = new BeginOperationDelegate(this.OnBeginSendJob);
            }
            if ((this.onEndSendJobDelegate == null)) {
                this.onEndSendJobDelegate = new EndOperationDelegate(this.OnEndSendJob);
            }
            if ((this.onSendJobCompletedDelegate == null)) {
                this.onSendJobCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendJobCompleted);
            }
            base.InvokeAsync(this.onBeginSendJobDelegate, new object[] {
                        clientId}, this.onEndSendJobDelegate, this.onSendJobCompletedDelegate, userState);
        }
        
        public HeuristicLab.Hive.Contracts.ResponseSerializedJob SendSerializedJob(System.Guid clientId) {
            return base.Channel.SendSerializedJob(clientId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendSerializedJob(System.Guid clientId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendSerializedJob(clientId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HeuristicLab.Hive.Contracts.ResponseSerializedJob EndSendSerializedJob(System.IAsyncResult result) {
            return base.Channel.EndSendSerializedJob(result);
        }
        
        private System.IAsyncResult OnBeginSendSerializedJob(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid clientId = ((System.Guid)(inValues[0]));
            return this.BeginSendSerializedJob(clientId, callback, asyncState);
        }
        
        private object[] OnEndSendSerializedJob(System.IAsyncResult result) {
            HeuristicLab.Hive.Contracts.ResponseSerializedJob retVal = this.EndSendSerializedJob(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendSerializedJobCompleted(object state) {
            if ((this.SendSerializedJobCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendSerializedJobCompleted(this, new SendSerializedJobCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendSerializedJobAsync(System.Guid clientId) {
            this.SendSerializedJobAsync(clientId, null);
        }
        
        public void SendSerializedJobAsync(System.Guid clientId, object userState) {
            if ((this.onBeginSendSerializedJobDelegate == null)) {
                this.onBeginSendSerializedJobDelegate = new BeginOperationDelegate(this.OnBeginSendSerializedJob);
            }
            if ((this.onEndSendSerializedJobDelegate == null)) {
                this.onEndSendSerializedJobDelegate = new EndOperationDelegate(this.OnEndSendSerializedJob);
            }
            if ((this.onSendSerializedJobCompletedDelegate == null)) {
                this.onSendSerializedJobCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendSerializedJobCompleted);
            }
            base.InvokeAsync(this.onBeginSendSerializedJobDelegate, new object[] {
                        clientId}, this.onEndSendSerializedJobDelegate, this.onSendSerializedJobCompletedDelegate, userState);
        }
        
        public HeuristicLab.Hive.Contracts.ResponseResultReceived StoreFinishedJobResult(System.Guid clientId, System.Guid jobId, byte[] result, double percentage, System.Exception exception) {
            return base.Channel.StoreFinishedJobResult(clientId, jobId, result, percentage, exception);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginStoreFinishedJobResult(System.Guid clientId, System.Guid jobId, byte[] result, double percentage, System.Exception exception, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStoreFinishedJobResult(clientId, jobId, result, percentage, exception, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HeuristicLab.Hive.Contracts.ResponseResultReceived EndStoreFinishedJobResult(System.IAsyncResult result) {
            return base.Channel.EndStoreFinishedJobResult(result);
        }
        
        private System.IAsyncResult OnBeginStoreFinishedJobResult(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid clientId = ((System.Guid)(inValues[0]));
            System.Guid jobId = ((System.Guid)(inValues[1]));
            byte[] result = ((byte[])(inValues[2]));
            double percentage = ((double)(inValues[3]));
            System.Exception exception = ((System.Exception)(inValues[4]));
            return this.BeginStoreFinishedJobResult(clientId, jobId, result, percentage, exception, callback, asyncState);
        }
        
        private object[] OnEndStoreFinishedJobResult(System.IAsyncResult result) {
            HeuristicLab.Hive.Contracts.ResponseResultReceived retVal = this.EndStoreFinishedJobResult(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStoreFinishedJobResultCompleted(object state) {
            if ((this.StoreFinishedJobResultCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StoreFinishedJobResultCompleted(this, new StoreFinishedJobResultCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StoreFinishedJobResultAsync(System.Guid clientId, System.Guid jobId, byte[] result, double percentage, System.Exception exception) {
            this.StoreFinishedJobResultAsync(clientId, jobId, result, percentage, exception, null);
        }
        
        public void StoreFinishedJobResultAsync(System.Guid clientId, System.Guid jobId, byte[] result, double percentage, System.Exception exception, object userState) {
            if ((this.onBeginStoreFinishedJobResultDelegate == null)) {
                this.onBeginStoreFinishedJobResultDelegate = new BeginOperationDelegate(this.OnBeginStoreFinishedJobResult);
            }
            if ((this.onEndStoreFinishedJobResultDelegate == null)) {
                this.onEndStoreFinishedJobResultDelegate = new EndOperationDelegate(this.OnEndStoreFinishedJobResult);
            }
            if ((this.onStoreFinishedJobResultCompletedDelegate == null)) {
                this.onStoreFinishedJobResultCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStoreFinishedJobResultCompleted);
            }
            base.InvokeAsync(this.onBeginStoreFinishedJobResultDelegate, new object[] {
                        clientId,
                        jobId,
                        result,
                        percentage,
                        exception}, this.onEndStoreFinishedJobResultDelegate, this.onStoreFinishedJobResultCompletedDelegate, userState);
        }
        
        public HeuristicLab.Hive.Contracts.ResponseResultReceived ProcessSnapshot(System.Guid clientId, System.Guid jobId, byte[] result, double percentage, System.Exception exception) {
            return base.Channel.ProcessSnapshot(clientId, jobId, result, percentage, exception);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProcessSnapshot(System.Guid clientId, System.Guid jobId, byte[] result, double percentage, System.Exception exception, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProcessSnapshot(clientId, jobId, result, percentage, exception, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HeuristicLab.Hive.Contracts.ResponseResultReceived EndProcessSnapshot(System.IAsyncResult result) {
            return base.Channel.EndProcessSnapshot(result);
        }
        
        private System.IAsyncResult OnBeginProcessSnapshot(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid clientId = ((System.Guid)(inValues[0]));
            System.Guid jobId = ((System.Guid)(inValues[1]));
            byte[] result = ((byte[])(inValues[2]));
            double percentage = ((double)(inValues[3]));
            System.Exception exception = ((System.Exception)(inValues[4]));
            return this.BeginProcessSnapshot(clientId, jobId, result, percentage, exception, callback, asyncState);
        }
        
        private object[] OnEndProcessSnapshot(System.IAsyncResult result) {
            HeuristicLab.Hive.Contracts.ResponseResultReceived retVal = this.EndProcessSnapshot(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProcessSnapshotCompleted(object state) {
            if ((this.ProcessSnapshotCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProcessSnapshotCompleted(this, new ProcessSnapshotCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProcessSnapshotAsync(System.Guid clientId, System.Guid jobId, byte[] result, double percentage, System.Exception exception) {
            this.ProcessSnapshotAsync(clientId, jobId, result, percentage, exception, null);
        }
        
        public void ProcessSnapshotAsync(System.Guid clientId, System.Guid jobId, byte[] result, double percentage, System.Exception exception, object userState) {
            if ((this.onBeginProcessSnapshotDelegate == null)) {
                this.onBeginProcessSnapshotDelegate = new BeginOperationDelegate(this.OnBeginProcessSnapshot);
            }
            if ((this.onEndProcessSnapshotDelegate == null)) {
                this.onEndProcessSnapshotDelegate = new EndOperationDelegate(this.OnEndProcessSnapshot);
            }
            if ((this.onProcessSnapshotCompletedDelegate == null)) {
                this.onProcessSnapshotCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProcessSnapshotCompleted);
            }
            base.InvokeAsync(this.onBeginProcessSnapshotDelegate, new object[] {
                        clientId,
                        jobId,
                        result,
                        percentage,
                        exception}, this.onEndProcessSnapshotDelegate, this.onProcessSnapshotCompletedDelegate, userState);
        }
        
        public HeuristicLab.Hive.Contracts.Response Logout(System.Guid clientId) {
            return base.Channel.Logout(clientId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogout(System.Guid clientId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogout(clientId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HeuristicLab.Hive.Contracts.Response EndLogout(System.IAsyncResult result) {
            return base.Channel.EndLogout(result);
        }
        
        private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid clientId = ((System.Guid)(inValues[0]));
            return this.BeginLogout(clientId, callback, asyncState);
        }
        
        private object[] OnEndLogout(System.IAsyncResult result) {
            HeuristicLab.Hive.Contracts.Response retVal = this.EndLogout(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLogoutCompleted(object state) {
            if ((this.LogoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoutCompleted(this, new LogoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoutAsync(System.Guid clientId) {
            this.LogoutAsync(clientId, null);
        }
        
        public void LogoutAsync(System.Guid clientId, object userState) {
            if ((this.onBeginLogoutDelegate == null)) {
                this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
            }
            if ((this.onEndLogoutDelegate == null)) {
                this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
            }
            if ((this.onLogoutCompletedDelegate == null)) {
                this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            base.InvokeAsync(this.onBeginLogoutDelegate, new object[] {
                        clientId}, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
        }
        
        public HeuristicLab.Hive.Contracts.Response IsJobStillNeeded(System.Guid jobId) {
            return base.Channel.IsJobStillNeeded(jobId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsJobStillNeeded(System.Guid jobId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsJobStillNeeded(jobId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HeuristicLab.Hive.Contracts.Response EndIsJobStillNeeded(System.IAsyncResult result) {
            return base.Channel.EndIsJobStillNeeded(result);
        }
        
        private System.IAsyncResult OnBeginIsJobStillNeeded(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid jobId = ((System.Guid)(inValues[0]));
            return this.BeginIsJobStillNeeded(jobId, callback, asyncState);
        }
        
        private object[] OnEndIsJobStillNeeded(System.IAsyncResult result) {
            HeuristicLab.Hive.Contracts.Response retVal = this.EndIsJobStillNeeded(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsJobStillNeededCompleted(object state) {
            if ((this.IsJobStillNeededCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsJobStillNeededCompleted(this, new IsJobStillNeededCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsJobStillNeededAsync(System.Guid jobId) {
            this.IsJobStillNeededAsync(jobId, null);
        }
        
        public void IsJobStillNeededAsync(System.Guid jobId, object userState) {
            if ((this.onBeginIsJobStillNeededDelegate == null)) {
                this.onBeginIsJobStillNeededDelegate = new BeginOperationDelegate(this.OnBeginIsJobStillNeeded);
            }
            if ((this.onEndIsJobStillNeededDelegate == null)) {
                this.onEndIsJobStillNeededDelegate = new EndOperationDelegate(this.OnEndIsJobStillNeeded);
            }
            if ((this.onIsJobStillNeededCompletedDelegate == null)) {
                this.onIsJobStillNeededCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsJobStillNeededCompleted);
            }
            base.InvokeAsync(this.onBeginIsJobStillNeededDelegate, new object[] {
                        jobId}, this.onEndIsJobStillNeededDelegate, this.onIsJobStillNeededCompletedDelegate, userState);
        }
        
        public HeuristicLab.Hive.Contracts.ResponsePlugin SendPlugins(HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList) {
            return base.Channel.SendPlugins(pluginList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendPlugins(HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendPlugins(pluginList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HeuristicLab.Hive.Contracts.ResponsePlugin EndSendPlugins(System.IAsyncResult result) {
            return base.Channel.EndSendPlugins(result);
        }
        
        private System.IAsyncResult OnBeginSendPlugins(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList = ((HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[])(inValues[0]));
            return this.BeginSendPlugins(pluginList, callback, asyncState);
        }
        
        private object[] OnEndSendPlugins(System.IAsyncResult result) {
            HeuristicLab.Hive.Contracts.ResponsePlugin retVal = this.EndSendPlugins(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendPluginsCompleted(object state) {
            if ((this.SendPluginsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendPluginsCompleted(this, new SendPluginsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendPluginsAsync(HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList) {
            this.SendPluginsAsync(pluginList, null);
        }
        
        public void SendPluginsAsync(HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList, object userState) {
            if ((this.onBeginSendPluginsDelegate == null)) {
                this.onBeginSendPluginsDelegate = new BeginOperationDelegate(this.OnBeginSendPlugins);
            }
            if ((this.onEndSendPluginsDelegate == null)) {
                this.onEndSendPluginsDelegate = new EndOperationDelegate(this.OnEndSendPlugins);
            }
            if ((this.onSendPluginsCompletedDelegate == null)) {
                this.onSendPluginsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendPluginsCompleted);
            }
            base.InvokeAsync(this.onBeginSendPluginsDelegate, new object[] {
                        pluginList}, this.onEndSendPluginsDelegate, this.onSendPluginsCompletedDelegate, userState);
        }
        
        public System.IO.Stream SendStreamedJob(System.Guid clientId) {
            return base.Channel.SendStreamedJob(clientId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendStreamedJob(System.Guid clientId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendStreamedJob(clientId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IO.Stream EndSendStreamedJob(System.IAsyncResult result) {
            return base.Channel.EndSendStreamedJob(result);
        }
        
        private System.IAsyncResult OnBeginSendStreamedJob(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid clientId = ((System.Guid)(inValues[0]));
            return this.BeginSendStreamedJob(clientId, callback, asyncState);
        }
        
        private object[] OnEndSendStreamedJob(System.IAsyncResult result) {
            System.IO.Stream retVal = this.EndSendStreamedJob(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendStreamedJobCompleted(object state) {
            if ((this.SendStreamedJobCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendStreamedJobCompleted(this, new SendStreamedJobCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendStreamedJobAsync(System.Guid clientId) {
            this.SendStreamedJobAsync(clientId, null);
        }
        
        public void SendStreamedJobAsync(System.Guid clientId, object userState) {
            if ((this.onBeginSendStreamedJobDelegate == null)) {
                this.onBeginSendStreamedJobDelegate = new BeginOperationDelegate(this.OnBeginSendStreamedJob);
            }
            if ((this.onEndSendStreamedJobDelegate == null)) {
                this.onEndSendStreamedJobDelegate = new EndOperationDelegate(this.OnEndSendStreamedJob);
            }
            if ((this.onSendStreamedJobCompletedDelegate == null)) {
                this.onSendStreamedJobCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendStreamedJobCompleted);
            }
            base.InvokeAsync(this.onBeginSendStreamedJobDelegate, new object[] {
                        clientId}, this.onEndSendStreamedJobDelegate, this.onSendStreamedJobCompletedDelegate, userState);
        }
        
        public System.IO.Stream SendStreamedPlugins(HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList) {
            return base.Channel.SendStreamedPlugins(pluginList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendStreamedPlugins(HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendStreamedPlugins(pluginList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IO.Stream EndSendStreamedPlugins(System.IAsyncResult result) {
            return base.Channel.EndSendStreamedPlugins(result);
        }
        
        private System.IAsyncResult OnBeginSendStreamedPlugins(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList = ((HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[])(inValues[0]));
            return this.BeginSendStreamedPlugins(pluginList, callback, asyncState);
        }
        
        private object[] OnEndSendStreamedPlugins(System.IAsyncResult result) {
            System.IO.Stream retVal = this.EndSendStreamedPlugins(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendStreamedPluginsCompleted(object state) {
            if ((this.SendStreamedPluginsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendStreamedPluginsCompleted(this, new SendStreamedPluginsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendStreamedPluginsAsync(HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList) {
            this.SendStreamedPluginsAsync(pluginList, null);
        }
        
        public void SendStreamedPluginsAsync(HeuristicLab.Hive.Contracts.BusinessObjects.HivePluginInfo[] pluginList, object userState) {
            if ((this.onBeginSendStreamedPluginsDelegate == null)) {
                this.onBeginSendStreamedPluginsDelegate = new BeginOperationDelegate(this.OnBeginSendStreamedPlugins);
            }
            if ((this.onEndSendStreamedPluginsDelegate == null)) {
                this.onEndSendStreamedPluginsDelegate = new EndOperationDelegate(this.OnEndSendStreamedPlugins);
            }
            if ((this.onSendStreamedPluginsCompletedDelegate == null)) {
                this.onSendStreamedPluginsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendStreamedPluginsCompleted);
            }
            base.InvokeAsync(this.onBeginSendStreamedPluginsDelegate, new object[] {
                        pluginList}, this.onEndSendStreamedPluginsDelegate, this.onSendStreamedPluginsCompletedDelegate, userState);
        }
        
        public HeuristicLab.Hive.Contracts.ResponseResultReceived StoreFinishedJobResultStreamed(System.IO.Stream stream) {
            return base.Channel.StoreFinishedJobResultStreamed(stream);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginStoreFinishedJobResultStreamed(System.IO.Stream stream, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStoreFinishedJobResultStreamed(stream, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HeuristicLab.Hive.Contracts.ResponseResultReceived EndStoreFinishedJobResultStreamed(System.IAsyncResult result) {
            return base.Channel.EndStoreFinishedJobResultStreamed(result);
        }
        
        private System.IAsyncResult OnBeginStoreFinishedJobResultStreamed(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.IO.Stream stream = ((System.IO.Stream)(inValues[0]));
            return this.BeginStoreFinishedJobResultStreamed(stream, callback, asyncState);
        }
        
        private object[] OnEndStoreFinishedJobResultStreamed(System.IAsyncResult result) {
            HeuristicLab.Hive.Contracts.ResponseResultReceived retVal = this.EndStoreFinishedJobResultStreamed(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStoreFinishedJobResultStreamedCompleted(object state) {
            if ((this.StoreFinishedJobResultStreamedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StoreFinishedJobResultStreamedCompleted(this, new StoreFinishedJobResultStreamedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StoreFinishedJobResultStreamedAsync(System.IO.Stream stream) {
            this.StoreFinishedJobResultStreamedAsync(stream, null);
        }
        
        public void StoreFinishedJobResultStreamedAsync(System.IO.Stream stream, object userState) {
            if ((this.onBeginStoreFinishedJobResultStreamedDelegate == null)) {
                this.onBeginStoreFinishedJobResultStreamedDelegate = new BeginOperationDelegate(this.OnBeginStoreFinishedJobResultStreamed);
            }
            if ((this.onEndStoreFinishedJobResultStreamedDelegate == null)) {
                this.onEndStoreFinishedJobResultStreamedDelegate = new EndOperationDelegate(this.OnEndStoreFinishedJobResultStreamed);
            }
            if ((this.onStoreFinishedJobResultStreamedCompletedDelegate == null)) {
                this.onStoreFinishedJobResultStreamedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStoreFinishedJobResultStreamedCompleted);
            }
            base.InvokeAsync(this.onBeginStoreFinishedJobResultStreamedDelegate, new object[] {
                        stream}, this.onEndStoreFinishedJobResultStreamedDelegate, this.onStoreFinishedJobResultStreamedCompletedDelegate, userState);
        }
        
        public HeuristicLab.Hive.Contracts.ResponseResultReceived ProcessSnapshotStreamed(System.IO.Stream stream) {
            return base.Channel.ProcessSnapshotStreamed(stream);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProcessSnapshotStreamed(System.IO.Stream stream, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProcessSnapshotStreamed(stream, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HeuristicLab.Hive.Contracts.ResponseResultReceived EndProcessSnapshotStreamed(System.IAsyncResult result) {
            return base.Channel.EndProcessSnapshotStreamed(result);
        }
        
        private System.IAsyncResult OnBeginProcessSnapshotStreamed(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.IO.Stream stream = ((System.IO.Stream)(inValues[0]));
            return this.BeginProcessSnapshotStreamed(stream, callback, asyncState);
        }
        
        private object[] OnEndProcessSnapshotStreamed(System.IAsyncResult result) {
            HeuristicLab.Hive.Contracts.ResponseResultReceived retVal = this.EndProcessSnapshotStreamed(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProcessSnapshotStreamedCompleted(object state) {
            if ((this.ProcessSnapshotStreamedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProcessSnapshotStreamedCompleted(this, new ProcessSnapshotStreamedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProcessSnapshotStreamedAsync(System.IO.Stream stream) {
            this.ProcessSnapshotStreamedAsync(stream, null);
        }
        
        public void ProcessSnapshotStreamedAsync(System.IO.Stream stream, object userState) {
            if ((this.onBeginProcessSnapshotStreamedDelegate == null)) {
                this.onBeginProcessSnapshotStreamedDelegate = new BeginOperationDelegate(this.OnBeginProcessSnapshotStreamed);
            }
            if ((this.onEndProcessSnapshotStreamedDelegate == null)) {
                this.onEndProcessSnapshotStreamedDelegate = new EndOperationDelegate(this.OnEndProcessSnapshotStreamed);
            }
            if ((this.onProcessSnapshotStreamedCompletedDelegate == null)) {
                this.onProcessSnapshotStreamedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProcessSnapshotStreamedCompleted);
            }
            base.InvokeAsync(this.onBeginProcessSnapshotStreamedDelegate, new object[] {
                        stream}, this.onEndProcessSnapshotStreamedDelegate, this.onProcessSnapshotStreamedCompletedDelegate, userState);
        }
    }
}
