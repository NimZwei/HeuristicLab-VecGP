#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//     Generated at 08/23/2010 01:35:16
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Runtime.Serialization;

namespace HeuristicLab.Services.OKB.DataAccess
{
	[DatabaseAttribute(Name=@"OKB")]
	public partial class OKBDataContext : DataContext
	{
		private static MappingSource mappingSource = new AttributeMappingSource();
		
		#region Extensibility Method Definitions
		partial void OnCreated();
		partial void InsertUser(User instance);
		partial void UpdateUser(User instance);
		partial void DeleteUser(User instance);
		partial void InsertAlgorithm_Parameter(Algorithm_Parameter instance);
		partial void UpdateAlgorithm_Parameter(Algorithm_Parameter instance);
		partial void DeleteAlgorithm_Parameter(Algorithm_Parameter instance);
		partial void InsertAlgorithmClass(AlgorithmClass instance);
		partial void UpdateAlgorithmClass(AlgorithmClass instance);
		partial void DeleteAlgorithmClass(AlgorithmClass instance);
		partial void InsertAlgorithmData(AlgorithmData instance);
		partial void UpdateAlgorithmData(AlgorithmData instance);
		partial void DeleteAlgorithmData(AlgorithmData instance);
		partial void InsertBlobResultValue(BlobResultValue instance);
		partial void UpdateBlobResultValue(BlobResultValue instance);
		partial void DeleteBlobResultValue(BlobResultValue instance);
		partial void InsertCharParameterValue(CharParameterValue instance);
		partial void UpdateCharParameterValue(CharParameterValue instance);
		partial void DeleteCharParameterValue(CharParameterValue instance);
		partial void InsertCharProblemCharacteristicValue(CharProblemCharacteristicValue instance);
		partial void UpdateCharProblemCharacteristicValue(CharProblemCharacteristicValue instance);
		partial void DeleteCharProblemCharacteristicValue(CharProblemCharacteristicValue instance);
		partial void InsertCharResultValue(CharResultValue instance);
		partial void UpdateCharResultValue(CharResultValue instance);
		partial void DeleteCharResultValue(CharResultValue instance);
		partial void InsertClient(Client instance);
		partial void UpdateClient(Client instance);
		partial void DeleteClient(Client instance);
		partial void InsertDataType(DataType instance);
		partial void UpdateDataType(DataType instance);
		partial void DeleteDataType(DataType instance);
		partial void InsertExperiment(Experiment instance);
		partial void UpdateExperiment(Experiment instance);
		partial void DeleteExperiment(Experiment instance);
		partial void InsertExperimentCreator(ExperimentCreator instance);
		partial void UpdateExperimentCreator(ExperimentCreator instance);
		partial void DeleteExperimentCreator(ExperimentCreator instance);
		partial void InsertFloatParameterValue(FloatParameterValue instance);
		partial void UpdateFloatParameterValue(FloatParameterValue instance);
		partial void DeleteFloatParameterValue(FloatParameterValue instance);
		partial void InsertFloatProblemCharacteristicValue(FloatProblemCharacteristicValue instance);
		partial void UpdateFloatProblemCharacteristicValue(FloatProblemCharacteristicValue instance);
		partial void DeleteFloatProblemCharacteristicValue(FloatProblemCharacteristicValue instance);
		partial void InsertFloatResultValue(FloatResultValue instance);
		partial void UpdateFloatResultValue(FloatResultValue instance);
		partial void DeleteFloatResultValue(FloatResultValue instance);
		partial void InsertIntParameterValue(IntParameterValue instance);
		partial void UpdateIntParameterValue(IntParameterValue instance);
		partial void DeleteIntParameterValue(IntParameterValue instance);
		partial void InsertIntProblemCharacteristicValue(IntProblemCharacteristicValue instance);
		partial void UpdateIntProblemCharacteristicValue(IntProblemCharacteristicValue instance);
		partial void DeleteIntProblemCharacteristicValue(IntProblemCharacteristicValue instance);
		partial void InsertIntResultValue(IntResultValue instance);
		partial void UpdateIntResultValue(IntResultValue instance);
		partial void DeleteIntResultValue(IntResultValue instance);
		partial void InsertPlatform(Platform instance);
		partial void UpdatePlatform(Platform instance);
		partial void DeletePlatform(Platform instance);
		partial void InsertProblem(Problem instance);
		partial void UpdateProblem(Problem instance);
		partial void DeleteProblem(Problem instance);
		partial void InsertProblem_Parameter(Problem_Parameter instance);
		partial void UpdateProblem_Parameter(Problem_Parameter instance);
		partial void DeleteProblem_Parameter(Problem_Parameter instance);
		partial void InsertProblemCharacteristic(ProblemCharacteristic instance);
		partial void UpdateProblemCharacteristic(ProblemCharacteristic instance);
		partial void DeleteProblemCharacteristic(ProblemCharacteristic instance);
		partial void InsertProblemClass(ProblemClass instance);
		partial void UpdateProblemClass(ProblemClass instance);
		partial void DeleteProblemClass(ProblemClass instance);
		partial void InsertProblemData(ProblemData instance);
		partial void UpdateProblemData(ProblemData instance);
		partial void DeleteProblemData(ProblemData instance);
		partial void InsertProject(Project instance);
		partial void UpdateProject(Project instance);
		partial void DeleteProject(Project instance);
		partial void InsertRun(Run instance);
		partial void UpdateRun(Run instance);
		partial void DeleteRun(Run instance);
		partial void InsertSolutionRepresentation(SolutionRepresentation instance);
		partial void UpdateSolutionRepresentation(SolutionRepresentation instance);
		partial void DeleteSolutionRepresentation(SolutionRepresentation instance);
		partial void InsertAlgorithm(Algorithm instance);
		partial void UpdateAlgorithm(Algorithm instance);
		partial void DeleteAlgorithm(Algorithm instance);
		partial void InsertAlgorithm_Result(Algorithm_Result instance);
		partial void UpdateAlgorithm_Result(Algorithm_Result instance);
		partial void DeleteAlgorithm_Result(Algorithm_Result instance);
		partial void InsertResult(Result instance);
		partial void UpdateResult(Result instance);
		partial void DeleteResult(Result instance);
		partial void InsertOperatorParameterValue(OperatorParameterValue instance);
		partial void UpdateOperatorParameterValue(OperatorParameterValue instance);
		partial void DeleteOperatorParameterValue(OperatorParameterValue instance);
		partial void InsertParameter(Parameter instance);
		partial void UpdateParameter(Parameter instance);
		partial void DeleteParameter(Parameter instance);
		#endregion
		
		#region Construction
		public OKBDataContext() :
			base(global::HeuristicLab.Services.OKB.DataAccess.Properties.Settings.Default.OKBConnectionString, mappingSource)
		{
			OnCreated();
		}
	
		public OKBDataContext(string connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OKBDataContext(System.Data.IDbConnection connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OKBDataContext(string connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OKBDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		#endregion
		
		#region Tables
		public Table<User> Users
		{
			get { return GetTable<User>(); }
		}
		
		public Table<Algorithm_Parameter> Algorithm_Parameters
		{
			get { return GetTable<Algorithm_Parameter>(); }
		}
		
		public Table<AlgorithmClass> AlgorithmClasses
		{
			get { return GetTable<AlgorithmClass>(); }
		}
		
		public Table<AlgorithmData> AlgorithmDatas
		{
			get { return GetTable<AlgorithmData>(); }
		}
		
		public Table<BlobResultValue> BlobResultValues
		{
			get { return GetTable<BlobResultValue>(); }
		}
		
		public Table<CharParameterValue> CharParameterValues
		{
			get { return GetTable<CharParameterValue>(); }
		}
		
		public Table<CharProblemCharacteristicValue> CharProblemCharacteristicValues
		{
			get { return GetTable<CharProblemCharacteristicValue>(); }
		}
		
		public Table<CharResultValue> CharResultValues
		{
			get { return GetTable<CharResultValue>(); }
		}
		
		public Table<Client> Clients
		{
			get { return GetTable<Client>(); }
		}
		
		public Table<DataType> DataTypes
		{
			get { return GetTable<DataType>(); }
		}
		
		public Table<Experiment> Experiments
		{
			get { return GetTable<Experiment>(); }
		}
		
		public Table<ExperimentCreator> ExperimentCreators
		{
			get { return GetTable<ExperimentCreator>(); }
		}
		
		public Table<FloatParameterValue> FloatParameterValues
		{
			get { return GetTable<FloatParameterValue>(); }
		}
		
		public Table<FloatProblemCharacteristicValue> FloatProblemCharacteristicValues
		{
			get { return GetTable<FloatProblemCharacteristicValue>(); }
		}
		
		public Table<FloatResultValue> FloatResultValues
		{
			get { return GetTable<FloatResultValue>(); }
		}
		
		public Table<IntParameterValue> IntParameterValues
		{
			get { return GetTable<IntParameterValue>(); }
		}
		
		public Table<IntProblemCharacteristicValue> IntProblemCharacteristicValues
		{
			get { return GetTable<IntProblemCharacteristicValue>(); }
		}
		
		public Table<IntResultValue> IntResultValues
		{
			get { return GetTable<IntResultValue>(); }
		}
		
		public Table<Platform> Platforms
		{
			get { return GetTable<Platform>(); }
		}
		
		public Table<Problem> Problems
		{
			get { return GetTable<Problem>(); }
		}
		
		public Table<Problem_Parameter> Problem_Parameters
		{
			get { return GetTable<Problem_Parameter>(); }
		}
		
		public Table<ProblemCharacteristic> ProblemCharacteristics
		{
			get { return GetTable<ProblemCharacteristic>(); }
		}
		
		public Table<ProblemClass> ProblemClasses
		{
			get { return GetTable<ProblemClass>(); }
		}
		
		public Table<ProblemData> ProblemDatas
		{
			get { return GetTable<ProblemData>(); }
		}
		
		public Table<Project> Projects
		{
			get { return GetTable<Project>(); }
		}
		
		public Table<Run> Runs
		{
			get { return GetTable<Run>(); }
		}
		
		public Table<SolutionRepresentation> SolutionRepresentations
		{
			get { return GetTable<SolutionRepresentation>(); }
		}
		
		public Table<Algorithm> Algorithms
		{
			get { return GetTable<Algorithm>(); }
		}
		
		public Table<Algorithm_Result> Algorithm_Results
		{
			get { return GetTable<Algorithm_Result>(); }
		}
		
		public Table<Result> Results
		{
			get { return GetTable<Result>(); }
		}
		
		public Table<OperatorParameterValue> OperatorParameterValues
		{
			get { return GetTable<OperatorParameterValue>(); }
		}
		
		public Table<Parameter> Parameters
		{
			get { return GetTable<Parameter>(); }
		}
		
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.[User]")]
[KnownType(typeof(User))]	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public User()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_ExperimentCreators = new EntitySet<ExperimentCreator>(attach_ExperimentCreators, detach_ExperimentCreators);
			_Runs = new EntitySet<Run>(attach_Runs, detach_Runs);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(Guid value);
		partial void OnIdChanged();
		private Guid _Id;
		[Column(Storage=@"_Id", DbType=@"UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public Guid Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<ExperimentCreator> _ExperimentCreators;
		[Association(Name=@"User_ExperimentCreator", Storage=@"_ExperimentCreators", ThisKey=@"Id", OtherKey=@"UserId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<ExperimentCreator> ExperimentCreators
		{
			get {
				if (serializing && !_ExperimentCreators.HasLoadedOrAssignedValues) {
					return null;
				}
				return _ExperimentCreators;
			}
			set {
				_ExperimentCreators.Assign(value);
			}
		}

		private void attach_ExperimentCreators(ExperimentCreator entity)
		{
			SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ExperimentCreators(ExperimentCreator entity)
		{
			SendPropertyChanging();
			entity.User = null;
		}
		private EntitySet<Run> _Runs;
		[Association(Name=@"User_Run", Storage=@"_Runs", ThisKey=@"Id", OtherKey=@"UserId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Run> Runs
		{
			get {
				if (serializing && !_Runs.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Runs;
			}
			set {
				_Runs.Assign(value);
			}
		}

		private void attach_Runs(Run entity)
		{
			SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Runs(Run entity)
		{
			SendPropertyChanging();
			entity.User = null;
		}
		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.Algorithm_Parameter")]
[KnownType(typeof(Algorithm_Parameter))]	public partial class Algorithm_Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Algorithm_Parameter()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Parameter = default(EntityRef<Parameter>);
			_Algorithm = default(EntityRef<Algorithm>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnAlgorithmIdChanging(int value);
		partial void OnAlgorithmIdChanged();
		private int _AlgorithmId;
		[Column(Storage=@"_AlgorithmId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int AlgorithmId
		{
			get { return _AlgorithmId; }
			set {
				if (_AlgorithmId != value) {
					if (_Algorithm.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnAlgorithmIdChanging(value);
					SendPropertyChanging();
					_AlgorithmId = value;
					SendPropertyChanged("AlgorithmId");
					OnAlgorithmIdChanged();
				}
			}
		}
		
		partial void OnParameterIdChanging(int value);
		partial void OnParameterIdChanged();
		private int _ParameterId;
		[Column(Storage=@"_ParameterId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int ParameterId
		{
			get { return _ParameterId; }
			set {
				if (_ParameterId != value) {
					if (_Parameter.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnParameterIdChanging(value);
					SendPropertyChanging();
					_ParameterId = value;
					SendPropertyChanged("ParameterId");
					OnParameterIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Parameter> _Parameter;
		[Association(Name=@"Parameter_Algorithm_Parameter", Storage=@"_Parameter", ThisKey=@"ParameterId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public Parameter Parameter
		{
			get {
				return _Parameter.Entity;
			}
			set {
				Parameter previousValue = _Parameter.Entity;
				if ((previousValue != value) || (!_Parameter.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Parameter.Entity = null;
						previousValue.Algorithm_Parameters.Remove(this);
					}
					_Parameter.Entity = value;
					if (value != null) {
						value.Algorithm_Parameters.Add(this);
						_ParameterId = value.Id;
					}
					else {
						_ParameterId = default(int);
					}
					SendPropertyChanged("Parameter");
				}
			}
		}

		private EntityRef<Algorithm> _Algorithm;
		[Association(Name=@"Algorithm_Algorithm_Parameter", Storage=@"_Algorithm", ThisKey=@"AlgorithmId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Algorithm Algorithm
		{
			get {
				return _Algorithm.Entity;
			}
			set {
				Algorithm previousValue = _Algorithm.Entity;
				if ((previousValue != value) || (!_Algorithm.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Algorithm.Entity = null;
						previousValue.Algorithm_Parameters.Remove(this);
					}
					_Algorithm.Entity = value;
					if (value != null) {
						value.Algorithm_Parameters.Add(this);
						_AlgorithmId = value.Id;
					}
					else {
						_AlgorithmId = default(int);
					}
					SendPropertyChanged("Algorithm");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.AlgorithmClass")]
[KnownType(typeof(AlgorithmClass))]	public partial class AlgorithmClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public AlgorithmClass()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Algorithms = new EntitySet<Algorithm>(attach_Algorithms, detach_Algorithms);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		private string _Description;
		[Column(Storage=@"_Description", DbType=@"VarChar(MAX)")]
		[DataMember(Order=3)]
		public string Description
		{
			get { return _Description; }
			set {
				if (_Description != value) {
					OnDescriptionChanging(value);
					SendPropertyChanging();
					_Description = value;
					SendPropertyChanged("Description");
					OnDescriptionChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<Algorithm> _Algorithms;
		[Association(Name=@"AlgorithmClass_Algorithm", Storage=@"_Algorithms", ThisKey=@"Id", OtherKey=@"AlgorithmClassId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Algorithm> Algorithms
		{
			get {
				if (serializing && !_Algorithms.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Algorithms;
			}
			set {
				_Algorithms.Assign(value);
			}
		}

		private void attach_Algorithms(Algorithm entity)
		{
			SendPropertyChanging();
			entity.AlgorithmClass = this;
		}
		
		private void detach_Algorithms(Algorithm entity)
		{
			SendPropertyChanging();
			entity.AlgorithmClass = null;
		}
		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.AlgorithmData")]
[KnownType(typeof(AlgorithmData))]	public partial class AlgorithmData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public AlgorithmData()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Algorithm = default(EntityRef<Algorithm>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnAlgorithmIdChanging(int value);
		partial void OnAlgorithmIdChanged();
		private int _AlgorithmId;
		[Column(Storage=@"_AlgorithmId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int AlgorithmId
		{
			get { return _AlgorithmId; }
			set {
				if (_AlgorithmId != value) {
					if (_Algorithm.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnAlgorithmIdChanging(value);
					SendPropertyChanging();
					_AlgorithmId = value;
					SendPropertyChanged("AlgorithmId");
					OnAlgorithmIdChanged();
				}
			}
		}
		
		partial void OnDataChanging(Binary value);
		partial void OnDataChanged();
		private Binary _Data;
		[Column(Storage=@"_Data", DbType=@"VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public Binary Data
		{
			get { return _Data; }
			set {
				if (_Data != value) {
					OnDataChanging(value);
					SendPropertyChanging();
					_Data = value;
					SendPropertyChanged("Data");
					OnDataChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Algorithm> _Algorithm;
		[Association(Name=@"Algorithm_AlgorithmData", Storage=@"_Algorithm", ThisKey=@"AlgorithmId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public Algorithm Algorithm
		{
			get {
				return _Algorithm.Entity;
			}
			set {
				Algorithm previousValue = _Algorithm.Entity;
				if ((previousValue != value) || (!_Algorithm.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Algorithm.Entity = null;
						previousValue.AlgorithmData = null;
					}
					_Algorithm.Entity = value;
					if (value != null) {
						value.AlgorithmData = this;
						_AlgorithmId = value.Id;
					}
					else {
						_AlgorithmId = default(int);
					}
					SendPropertyChanged("Algorithm");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.BlobResultValue")]
[KnownType(typeof(BlobResultValue))]	public partial class BlobResultValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public BlobResultValue()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Run = default(EntityRef<Run>);
			_Result = default(EntityRef<Result>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnResultIdChanging(int value);
		partial void OnResultIdChanged();
		private int _ResultId;
		[Column(Storage=@"_ResultId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ResultId
		{
			get { return _ResultId; }
			set {
				if (_ResultId != value) {
					if (_Result.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnResultIdChanging(value);
					SendPropertyChanging();
					_ResultId = value;
					SendPropertyChanged("ResultId");
					OnResultIdChanged();
				}
			}
		}
		
		partial void OnRunIdChanging(int value);
		partial void OnRunIdChanged();
		private int _RunId;
		[Column(Storage=@"_RunId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int RunId
		{
			get { return _RunId; }
			set {
				if (_RunId != value) {
					if (_Run.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnRunIdChanging(value);
					SendPropertyChanging();
					_RunId = value;
					SendPropertyChanged("RunId");
					OnRunIdChanged();
				}
			}
		}
		
		partial void OnValueChanging(Binary value);
		partial void OnValueChanged();
		private Binary _Value;
		[Column(Storage=@"_Value", DbType=@"VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public Binary Value
		{
			get { return _Value; }
			set {
				if (_Value != value) {
					OnValueChanging(value);
					SendPropertyChanging();
					_Value = value;
					SendPropertyChanged("Value");
					OnValueChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Run> _Run;
		[Association(Name=@"Run_BlobResultValue", Storage=@"_Run", ThisKey=@"RunId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Run Run
		{
			get {
				return _Run.Entity;
			}
			set {
				Run previousValue = _Run.Entity;
				if ((previousValue != value) || (!_Run.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Run.Entity = null;
						previousValue.BlobResultValues.Remove(this);
					}
					_Run.Entity = value;
					if (value != null) {
						value.BlobResultValues.Add(this);
						_RunId = value.Id;
					}
					else {
						_RunId = default(int);
					}
					SendPropertyChanged("Run");
				}
			}
		}

		private EntityRef<Result> _Result;
		[Association(Name=@"Result_BlobResultValue", Storage=@"_Result", ThisKey=@"ResultId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public Result Result
		{
			get {
				return _Result.Entity;
			}
			set {
				Result previousValue = _Result.Entity;
				if ((previousValue != value) || (!_Result.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Result.Entity = null;
						previousValue.BlobResultValues.Remove(this);
					}
					_Result.Entity = value;
					if (value != null) {
						value.BlobResultValues.Add(this);
						_ResultId = value.Id;
					}
					else {
						_ResultId = default(int);
					}
					SendPropertyChanged("Result");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.CharParameterValue")]
[KnownType(typeof(CharParameterValue))]	public partial class CharParameterValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public CharParameterValue()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Experiment = default(EntityRef<Experiment>);
			_Parameter = default(EntityRef<Parameter>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnParameterIdChanging(int value);
		partial void OnParameterIdChanged();
		private int _ParameterId;
		[Column(Storage=@"_ParameterId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ParameterId
		{
			get { return _ParameterId; }
			set {
				if (_ParameterId != value) {
					if (_Parameter.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnParameterIdChanging(value);
					SendPropertyChanging();
					_ParameterId = value;
					SendPropertyChanged("ParameterId");
					OnParameterIdChanged();
				}
			}
		}
		
		partial void OnExperimentIdChanging(int value);
		partial void OnExperimentIdChanged();
		private int _ExperimentId;
		[Column(Storage=@"_ExperimentId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int ExperimentId
		{
			get { return _ExperimentId; }
			set {
				if (_ExperimentId != value) {
					if (_Experiment.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnExperimentIdChanging(value);
					SendPropertyChanging();
					_ExperimentId = value;
					SendPropertyChanged("ExperimentId");
					OnExperimentIdChanged();
				}
			}
		}
		
		partial void OnValueChanging(string value);
		partial void OnValueChanged();
		private string _Value;
		[Column(Storage=@"_Value", DbType=@"VarChar(MAX) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Value
		{
			get { return _Value; }
			set {
				if (_Value != value) {
					OnValueChanging(value);
					SendPropertyChanging();
					_Value = value;
					SendPropertyChanged("Value");
					OnValueChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Experiment> _Experiment;
		[Association(Name=@"Experiment_CharParameterValue", Storage=@"_Experiment", ThisKey=@"ExperimentId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Experiment Experiment
		{
			get {
				return _Experiment.Entity;
			}
			set {
				Experiment previousValue = _Experiment.Entity;
				if ((previousValue != value) || (!_Experiment.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Experiment.Entity = null;
						previousValue.CharParameterValues.Remove(this);
					}
					_Experiment.Entity = value;
					if (value != null) {
						value.CharParameterValues.Add(this);
						_ExperimentId = value.Id;
					}
					else {
						_ExperimentId = default(int);
					}
					SendPropertyChanged("Experiment");
				}
			}
		}

		private EntityRef<Parameter> _Parameter;
		[Association(Name=@"Parameter_CharParameterValue", Storage=@"_Parameter", ThisKey=@"ParameterId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public Parameter Parameter
		{
			get {
				return _Parameter.Entity;
			}
			set {
				Parameter previousValue = _Parameter.Entity;
				if ((previousValue != value) || (!_Parameter.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Parameter.Entity = null;
						previousValue.CharParameterValues.Remove(this);
					}
					_Parameter.Entity = value;
					if (value != null) {
						value.CharParameterValues.Add(this);
						_ParameterId = value.Id;
					}
					else {
						_ParameterId = default(int);
					}
					SendPropertyChanged("Parameter");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.CharProblemCharacteristicValue")]
[KnownType(typeof(CharProblemCharacteristicValue))]	public partial class CharProblemCharacteristicValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public CharProblemCharacteristicValue()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Problem = default(EntityRef<Problem>);
			_ProblemCharacteristic = default(EntityRef<ProblemCharacteristic>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnProblemCharacteristicIdChanging(int value);
		partial void OnProblemCharacteristicIdChanged();
		private int _ProblemCharacteristicId;
		[Column(Storage=@"_ProblemCharacteristicId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ProblemCharacteristicId
		{
			get { return _ProblemCharacteristicId; }
			set {
				if (_ProblemCharacteristicId != value) {
					if (_ProblemCharacteristic.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProblemCharacteristicIdChanging(value);
					SendPropertyChanging();
					_ProblemCharacteristicId = value;
					SendPropertyChanged("ProblemCharacteristicId");
					OnProblemCharacteristicIdChanged();
				}
			}
		}
		
		partial void OnProblemIdChanging(int value);
		partial void OnProblemIdChanged();
		private int _ProblemId;
		[Column(Storage=@"_ProblemId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int ProblemId
		{
			get { return _ProblemId; }
			set {
				if (_ProblemId != value) {
					if (_Problem.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProblemIdChanging(value);
					SendPropertyChanging();
					_ProblemId = value;
					SendPropertyChanged("ProblemId");
					OnProblemIdChanged();
				}
			}
		}
		
		partial void OnValueChanging(string value);
		partial void OnValueChanged();
		private string _Value;
		[Column(Storage=@"_Value", DbType=@"VarChar(MAX) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Value
		{
			get { return _Value; }
			set {
				if (_Value != value) {
					OnValueChanging(value);
					SendPropertyChanging();
					_Value = value;
					SendPropertyChanged("Value");
					OnValueChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Problem> _Problem;
		[Association(Name=@"Problem_CharProblemCharacteristicValue", Storage=@"_Problem", ThisKey=@"ProblemId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Problem Problem
		{
			get {
				return _Problem.Entity;
			}
			set {
				Problem previousValue = _Problem.Entity;
				if ((previousValue != value) || (!_Problem.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Problem.Entity = null;
						previousValue.CharProblemCharacteristicValues.Remove(this);
					}
					_Problem.Entity = value;
					if (value != null) {
						value.CharProblemCharacteristicValues.Add(this);
						_ProblemId = value.Id;
					}
					else {
						_ProblemId = default(int);
					}
					SendPropertyChanged("Problem");
				}
			}
		}

		private EntityRef<ProblemCharacteristic> _ProblemCharacteristic;
		[Association(Name=@"ProblemCharacteristic_CharProblemCharacteristicValue", Storage=@"_ProblemCharacteristic", ThisKey=@"ProblemCharacteristicId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public ProblemCharacteristic ProblemCharacteristic
		{
			get {
				return _ProblemCharacteristic.Entity;
			}
			set {
				ProblemCharacteristic previousValue = _ProblemCharacteristic.Entity;
				if ((previousValue != value) || (!_ProblemCharacteristic.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_ProblemCharacteristic.Entity = null;
						previousValue.CharProblemCharacteristicValues.Remove(this);
					}
					_ProblemCharacteristic.Entity = value;
					if (value != null) {
						value.CharProblemCharacteristicValues.Add(this);
						_ProblemCharacteristicId = value.Id;
					}
					else {
						_ProblemCharacteristicId = default(int);
					}
					SendPropertyChanged("ProblemCharacteristic");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.CharResultValue")]
[KnownType(typeof(CharResultValue))]	public partial class CharResultValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public CharResultValue()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Run = default(EntityRef<Run>);
			_Result = default(EntityRef<Result>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnResultIdChanging(int value);
		partial void OnResultIdChanged();
		private int _ResultId;
		[Column(Storage=@"_ResultId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ResultId
		{
			get { return _ResultId; }
			set {
				if (_ResultId != value) {
					if (_Result.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnResultIdChanging(value);
					SendPropertyChanging();
					_ResultId = value;
					SendPropertyChanged("ResultId");
					OnResultIdChanged();
				}
			}
		}
		
		partial void OnRunIdChanging(int value);
		partial void OnRunIdChanged();
		private int _RunId;
		[Column(Storage=@"_RunId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int RunId
		{
			get { return _RunId; }
			set {
				if (_RunId != value) {
					if (_Run.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnRunIdChanging(value);
					SendPropertyChanging();
					_RunId = value;
					SendPropertyChanged("RunId");
					OnRunIdChanged();
				}
			}
		}
		
		partial void OnValueChanging(string value);
		partial void OnValueChanged();
		private string _Value;
		[Column(Storage=@"_Value", DbType=@"VarChar(MAX) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Value
		{
			get { return _Value; }
			set {
				if (_Value != value) {
					OnValueChanging(value);
					SendPropertyChanging();
					_Value = value;
					SendPropertyChanged("Value");
					OnValueChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Run> _Run;
		[Association(Name=@"Run_CharResultValue", Storage=@"_Run", ThisKey=@"RunId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Run Run
		{
			get {
				return _Run.Entity;
			}
			set {
				Run previousValue = _Run.Entity;
				if ((previousValue != value) || (!_Run.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Run.Entity = null;
						previousValue.CharResultValues.Remove(this);
					}
					_Run.Entity = value;
					if (value != null) {
						value.CharResultValues.Add(this);
						_RunId = value.Id;
					}
					else {
						_RunId = default(int);
					}
					SendPropertyChanged("Run");
				}
			}
		}

		private EntityRef<Result> _Result;
		[Association(Name=@"Result_CharResultValue", Storage=@"_Result", ThisKey=@"ResultId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public Result Result
		{
			get {
				return _Result.Entity;
			}
			set {
				Result previousValue = _Result.Entity;
				if ((previousValue != value) || (!_Result.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Result.Entity = null;
						previousValue.CharResultValues.Remove(this);
					}
					_Result.Entity = value;
					if (value != null) {
						value.CharResultValues.Add(this);
						_ResultId = value.Id;
					}
					else {
						_ResultId = default(int);
					}
					SendPropertyChanged("Result");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.Client")]
[KnownType(typeof(Client))]	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Client()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Runs = new EntitySet<Run>(attach_Runs, detach_Runs);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(Guid value);
		partial void OnIdChanged();
		private Guid _Id;
		[Column(Storage=@"_Id", DbType=@"UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public Guid Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<Run> _Runs;
		[Association(Name=@"Client_Run", Storage=@"_Runs", ThisKey=@"Id", OtherKey=@"ClientId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Run> Runs
		{
			get {
				if (serializing && !_Runs.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Runs;
			}
			set {
				_Runs.Assign(value);
			}
		}

		private void attach_Runs(Run entity)
		{
			SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Runs(Run entity)
		{
			SendPropertyChanging();
			entity.Client = null;
		}
		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.DataType")]
[KnownType(typeof(DataType))]	public partial class DataType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public DataType()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_ProblemCharacteristics = new EntitySet<ProblemCharacteristic>(attach_ProblemCharacteristics, detach_ProblemCharacteristics);
			_Results = new EntitySet<Result>(attach_Results, detach_Results);
			_OperatorParameterValues = new EntitySet<OperatorParameterValue>(attach_OperatorParameterValues, detach_OperatorParameterValues);
			_Parameters = new EntitySet<Parameter>(attach_Parameters, detach_Parameters);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnSqlNameChanging(string value);
		partial void OnSqlNameChanged();
		private string _SqlName;
		[Column(Storage=@"_SqlName", DbType=@"VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string SqlName
		{
			get { return _SqlName; }
			set {
				if (_SqlName != value) {
					OnSqlNameChanging(value);
					SendPropertyChanging();
					_SqlName = value;
					SendPropertyChanged("SqlName");
					OnSqlNameChanged();
				}
			}
		}
		
		partial void OnClrNameChanging(string value);
		partial void OnClrNameChanged();
		private string _ClrName;
		[Column(Storage=@"_ClrName", DbType=@"VarChar(MAX) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string ClrName
		{
			get { return _ClrName; }
			set {
				if (_ClrName != value) {
					OnClrNameChanging(value);
					SendPropertyChanging();
					_ClrName = value;
					SendPropertyChanged("ClrName");
					OnClrNameChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<ProblemCharacteristic> _ProblemCharacteristics;
		[Association(Name=@"DataType_ProblemCharacteristic", Storage=@"_ProblemCharacteristics", ThisKey=@"Id", OtherKey=@"DataTypeId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<ProblemCharacteristic> ProblemCharacteristics
		{
			get {
				if (serializing && !_ProblemCharacteristics.HasLoadedOrAssignedValues) {
					return null;
				}
				return _ProblemCharacteristics;
			}
			set {
				_ProblemCharacteristics.Assign(value);
			}
		}

		private void attach_ProblemCharacteristics(ProblemCharacteristic entity)
		{
			SendPropertyChanging();
			entity.DataType = this;
		}
		
		private void detach_ProblemCharacteristics(ProblemCharacteristic entity)
		{
			SendPropertyChanging();
			entity.DataType = null;
		}
		private EntitySet<Result> _Results;
		[Association(Name=@"DataType_Result", Storage=@"_Results", ThisKey=@"Id", OtherKey=@"DataTypeId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Result> Results
		{
			get {
				if (serializing && !_Results.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Results;
			}
			set {
				_Results.Assign(value);
			}
		}

		private void attach_Results(Result entity)
		{
			SendPropertyChanging();
			entity.DataType = this;
		}
		
		private void detach_Results(Result entity)
		{
			SendPropertyChanging();
			entity.DataType = null;
		}
		private EntitySet<OperatorParameterValue> _OperatorParameterValues;
		[Association(Name=@"DataType_OperatorParameterValue", Storage=@"_OperatorParameterValues", ThisKey=@"Id", OtherKey=@"DataTypeId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<OperatorParameterValue> OperatorParameterValues
		{
			get {
				if (serializing && !_OperatorParameterValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _OperatorParameterValues;
			}
			set {
				_OperatorParameterValues.Assign(value);
			}
		}

		private void attach_OperatorParameterValues(OperatorParameterValue entity)
		{
			SendPropertyChanging();
			entity.DataType = this;
		}
		
		private void detach_OperatorParameterValues(OperatorParameterValue entity)
		{
			SendPropertyChanging();
			entity.DataType = null;
		}
		private EntitySet<Parameter> _Parameters;
		[Association(Name=@"DataType_Parameter", Storage=@"_Parameters", ThisKey=@"Id", OtherKey=@"DataTypeId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<Parameter> Parameters
		{
			get {
				if (serializing && !_Parameters.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Parameters;
			}
			set {
				_Parameters.Assign(value);
			}
		}

		private void attach_Parameters(Parameter entity)
		{
			SendPropertyChanging();
			entity.DataType = this;
		}
		
		private void detach_Parameters(Parameter entity)
		{
			SendPropertyChanging();
			entity.DataType = null;
		}
		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.Experiment")]
[KnownType(typeof(Experiment))]	public partial class Experiment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Experiment()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_CharParameterValues = new EntitySet<CharParameterValue>(attach_CharParameterValues, detach_CharParameterValues);
			_ExperimentCreators = new EntitySet<ExperimentCreator>(attach_ExperimentCreators, detach_ExperimentCreators);
			_FloatParameterValues = new EntitySet<FloatParameterValue>(attach_FloatParameterValues, detach_FloatParameterValues);
			_IntParameterValues = new EntitySet<IntParameterValue>(attach_IntParameterValues, detach_IntParameterValues);
			_Runs = new EntitySet<Run>(attach_Runs, detach_Runs);
			_OperatorParameterValues = new EntitySet<OperatorParameterValue>(attach_OperatorParameterValues, detach_OperatorParameterValues);
			_Problem = default(EntityRef<Problem>);
			_Project = default(EntityRef<Project>);
			_Algorithm = default(EntityRef<Algorithm>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnProjectIdChanging(int value);
		partial void OnProjectIdChanged();
		private int _ProjectId;
		[Column(Storage=@"_ProjectId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public int ProjectId
		{
			get { return _ProjectId; }
			set {
				if (_ProjectId != value) {
					if (_Project.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProjectIdChanging(value);
					SendPropertyChanging();
					_ProjectId = value;
					SendPropertyChanged("ProjectId");
					OnProjectIdChanged();
				}
			}
		}
		
		partial void OnAlgorithmIdChanging(int value);
		partial void OnAlgorithmIdChanged();
		private int _AlgorithmId;
		[Column(Storage=@"_AlgorithmId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public int AlgorithmId
		{
			get { return _AlgorithmId; }
			set {
				if (_AlgorithmId != value) {
					if (_Algorithm.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnAlgorithmIdChanging(value);
					SendPropertyChanging();
					_AlgorithmId = value;
					SendPropertyChanged("AlgorithmId");
					OnAlgorithmIdChanged();
				}
			}
		}
		
		partial void OnProblemIdChanging(int value);
		partial void OnProblemIdChanged();
		private int _ProblemId;
		[Column(Storage=@"_ProblemId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public int ProblemId
		{
			get { return _ProblemId; }
			set {
				if (_ProblemId != value) {
					if (_Problem.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProblemIdChanging(value);
					SendPropertyChanging();
					_ProblemId = value;
					SendPropertyChanged("ProblemId");
					OnProblemIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<CharParameterValue> _CharParameterValues;
		[Association(Name=@"Experiment_CharParameterValue", Storage=@"_CharParameterValues", ThisKey=@"Id", OtherKey=@"ExperimentId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<CharParameterValue> CharParameterValues
		{
			get {
				if (serializing && !_CharParameterValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _CharParameterValues;
			}
			set {
				_CharParameterValues.Assign(value);
			}
		}

		private void attach_CharParameterValues(CharParameterValue entity)
		{
			SendPropertyChanging();
			entity.Experiment = this;
		}
		
		private void detach_CharParameterValues(CharParameterValue entity)
		{
			SendPropertyChanging();
			entity.Experiment = null;
		}
		private EntitySet<ExperimentCreator> _ExperimentCreators;
		[Association(Name=@"Experiment_ExperimentCreator", Storage=@"_ExperimentCreators", ThisKey=@"Id", OtherKey=@"ExperimentId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<ExperimentCreator> ExperimentCreators
		{
			get {
				if (serializing && !_ExperimentCreators.HasLoadedOrAssignedValues) {
					return null;
				}
				return _ExperimentCreators;
			}
			set {
				_ExperimentCreators.Assign(value);
			}
		}

		private void attach_ExperimentCreators(ExperimentCreator entity)
		{
			SendPropertyChanging();
			entity.Experiment = this;
		}
		
		private void detach_ExperimentCreators(ExperimentCreator entity)
		{
			SendPropertyChanging();
			entity.Experiment = null;
		}
		private EntitySet<FloatParameterValue> _FloatParameterValues;
		[Association(Name=@"Experiment_FloatParameterValue", Storage=@"_FloatParameterValues", ThisKey=@"Id", OtherKey=@"ExperimentId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<FloatParameterValue> FloatParameterValues
		{
			get {
				if (serializing && !_FloatParameterValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _FloatParameterValues;
			}
			set {
				_FloatParameterValues.Assign(value);
			}
		}

		private void attach_FloatParameterValues(FloatParameterValue entity)
		{
			SendPropertyChanging();
			entity.Experiment = this;
		}
		
		private void detach_FloatParameterValues(FloatParameterValue entity)
		{
			SendPropertyChanging();
			entity.Experiment = null;
		}
		private EntitySet<IntParameterValue> _IntParameterValues;
		[Association(Name=@"Experiment_IntParameterValue", Storage=@"_IntParameterValues", ThisKey=@"Id", OtherKey=@"ExperimentId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<IntParameterValue> IntParameterValues
		{
			get {
				if (serializing && !_IntParameterValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _IntParameterValues;
			}
			set {
				_IntParameterValues.Assign(value);
			}
		}

		private void attach_IntParameterValues(IntParameterValue entity)
		{
			SendPropertyChanging();
			entity.Experiment = this;
		}
		
		private void detach_IntParameterValues(IntParameterValue entity)
		{
			SendPropertyChanging();
			entity.Experiment = null;
		}
		private EntitySet<Run> _Runs;
		[Association(Name=@"Experiment_Run", Storage=@"_Runs", ThisKey=@"Id", OtherKey=@"ExperimentId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<Run> Runs
		{
			get {
				if (serializing && !_Runs.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Runs;
			}
			set {
				_Runs.Assign(value);
			}
		}

		private void attach_Runs(Run entity)
		{
			SendPropertyChanging();
			entity.Experiment = this;
		}
		
		private void detach_Runs(Run entity)
		{
			SendPropertyChanging();
			entity.Experiment = null;
		}
		private EntitySet<OperatorParameterValue> _OperatorParameterValues;
		[Association(Name=@"Experiment_OperatorParameterValue", Storage=@"_OperatorParameterValues", ThisKey=@"Id", OtherKey=@"ExperimentId")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<OperatorParameterValue> OperatorParameterValues
		{
			get {
				if (serializing && !_OperatorParameterValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _OperatorParameterValues;
			}
			set {
				_OperatorParameterValues.Assign(value);
			}
		}

		private void attach_OperatorParameterValues(OperatorParameterValue entity)
		{
			SendPropertyChanging();
			entity.Experiment = this;
		}
		
		private void detach_OperatorParameterValues(OperatorParameterValue entity)
		{
			SendPropertyChanging();
			entity.Experiment = null;
		}
		private EntityRef<Problem> _Problem;
		[Association(Name=@"Problem_Experiment", Storage=@"_Problem", ThisKey=@"ProblemId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public Problem Problem
		{
			get {
				if (serializing && !_Problem.HasLoadedOrAssignedValue) {
					return null;
				}
				return _Problem.Entity;
			}
			set {
				Problem previousValue = _Problem.Entity;
				if ((previousValue != value) || (!_Problem.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Problem.Entity = null;
						previousValue.Experiments.Remove(this);
					}
					_Problem.Entity = value;
					if (value != null) {
						value.Experiments.Add(this);
						_ProblemId = value.Id;
					}
					else {
						_ProblemId = default(int);
					}
					SendPropertyChanged("Problem");
				}
			}
		}

		private EntityRef<Project> _Project;
		[Association(Name=@"Project_Experiment", Storage=@"_Project", ThisKey=@"ProjectId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public Project Project
		{
			get {
				if (serializing && !_Project.HasLoadedOrAssignedValue) {
					return null;
				}
				return _Project.Entity;
			}
			set {
				Project previousValue = _Project.Entity;
				if ((previousValue != value) || (!_Project.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Project.Entity = null;
						previousValue.Experiments.Remove(this);
					}
					_Project.Entity = value;
					if (value != null) {
						value.Experiments.Add(this);
						_ProjectId = value.Id;
					}
					else {
						_ProjectId = default(int);
					}
					SendPropertyChanged("Project");
				}
			}
		}

		private EntityRef<Algorithm> _Algorithm;
		[Association(Name=@"Algorithm_Experiment", Storage=@"_Algorithm", ThisKey=@"AlgorithmId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public Algorithm Algorithm
		{
			get {
				if (serializing && !_Algorithm.HasLoadedOrAssignedValue) {
					return null;
				}
				return _Algorithm.Entity;
			}
			set {
				Algorithm previousValue = _Algorithm.Entity;
				if ((previousValue != value) || (!_Algorithm.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Algorithm.Entity = null;
						previousValue.Experiments.Remove(this);
					}
					_Algorithm.Entity = value;
					if (value != null) {
						value.Experiments.Add(this);
						_AlgorithmId = value.Id;
					}
					else {
						_AlgorithmId = default(int);
					}
					SendPropertyChanged("Algorithm");
				}
			}
		}

		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.ExperimentCreator")]
[KnownType(typeof(ExperimentCreator))]	public partial class ExperimentCreator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public ExperimentCreator()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Experiment = default(EntityRef<Experiment>);
			_User = default(EntityRef<User>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnExperimentIdChanging(int value);
		partial void OnExperimentIdChanged();
		private int _ExperimentId;
		[Column(Storage=@"_ExperimentId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ExperimentId
		{
			get { return _ExperimentId; }
			set {
				if (_ExperimentId != value) {
					if (_Experiment.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnExperimentIdChanging(value);
					SendPropertyChanging();
					_ExperimentId = value;
					SendPropertyChanged("ExperimentId");
					OnExperimentIdChanged();
				}
			}
		}
		
		partial void OnUserIdChanging(Guid value);
		partial void OnUserIdChanged();
		private Guid _UserId;
		[Column(Storage=@"_UserId", DbType=@"UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public Guid UserId
		{
			get { return _UserId; }
			set {
				if (_UserId != value) {
					if (_User.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnUserIdChanging(value);
					SendPropertyChanging();
					_UserId = value;
					SendPropertyChanged("UserId");
					OnUserIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Experiment> _Experiment;
		[Association(Name=@"Experiment_ExperimentCreator", Storage=@"_Experiment", ThisKey=@"ExperimentId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public Experiment Experiment
		{
			get {
				return _Experiment.Entity;
			}
			set {
				Experiment previousValue = _Experiment.Entity;
				if ((previousValue != value) || (!_Experiment.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Experiment.Entity = null;
						previousValue.ExperimentCreators.Remove(this);
					}
					_Experiment.Entity = value;
					if (value != null) {
						value.ExperimentCreators.Add(this);
						_ExperimentId = value.Id;
					}
					else {
						_ExperimentId = default(int);
					}
					SendPropertyChanged("Experiment");
				}
			}
		}

		private EntityRef<User> _User;
		[Association(Name=@"User_ExperimentCreator", Storage=@"_User", ThisKey=@"UserId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public User User
		{
			get {
				return _User.Entity;
			}
			set {
				User previousValue = _User.Entity;
				if ((previousValue != value) || (!_User.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_User.Entity = null;
						previousValue.ExperimentCreators.Remove(this);
					}
					_User.Entity = value;
					if (value != null) {
						value.ExperimentCreators.Add(this);
						_UserId = value.Id;
					}
					else {
						_UserId = default(Guid);
					}
					SendPropertyChanged("User");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.FloatParameterValue")]
[KnownType(typeof(FloatParameterValue))]	public partial class FloatParameterValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public FloatParameterValue()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Experiment = default(EntityRef<Experiment>);
			_Parameter = default(EntityRef<Parameter>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnParameterIdChanging(int value);
		partial void OnParameterIdChanged();
		private int _ParameterId;
		[Column(Storage=@"_ParameterId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ParameterId
		{
			get { return _ParameterId; }
			set {
				if (_ParameterId != value) {
					if (_Parameter.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnParameterIdChanging(value);
					SendPropertyChanging();
					_ParameterId = value;
					SendPropertyChanged("ParameterId");
					OnParameterIdChanged();
				}
			}
		}
		
		partial void OnExperimentIdChanging(int value);
		partial void OnExperimentIdChanged();
		private int _ExperimentId;
		[Column(Storage=@"_ExperimentId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int ExperimentId
		{
			get { return _ExperimentId; }
			set {
				if (_ExperimentId != value) {
					if (_Experiment.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnExperimentIdChanging(value);
					SendPropertyChanging();
					_ExperimentId = value;
					SendPropertyChanged("ExperimentId");
					OnExperimentIdChanged();
				}
			}
		}
		
		partial void OnValueChanging(double value);
		partial void OnValueChanged();
		private double _Value;
		[Column(Storage=@"_Value", DbType=@"Float NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public double Value
		{
			get { return _Value; }
			set {
				if (_Value != value) {
					OnValueChanging(value);
					SendPropertyChanging();
					_Value = value;
					SendPropertyChanged("Value");
					OnValueChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Experiment> _Experiment;
		[Association(Name=@"Experiment_FloatParameterValue", Storage=@"_Experiment", ThisKey=@"ExperimentId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Experiment Experiment
		{
			get {
				return _Experiment.Entity;
			}
			set {
				Experiment previousValue = _Experiment.Entity;
				if ((previousValue != value) || (!_Experiment.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Experiment.Entity = null;
						previousValue.FloatParameterValues.Remove(this);
					}
					_Experiment.Entity = value;
					if (value != null) {
						value.FloatParameterValues.Add(this);
						_ExperimentId = value.Id;
					}
					else {
						_ExperimentId = default(int);
					}
					SendPropertyChanged("Experiment");
				}
			}
		}

		private EntityRef<Parameter> _Parameter;
		[Association(Name=@"Parameter_FloatParameterValue", Storage=@"_Parameter", ThisKey=@"ParameterId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public Parameter Parameter
		{
			get {
				return _Parameter.Entity;
			}
			set {
				Parameter previousValue = _Parameter.Entity;
				if ((previousValue != value) || (!_Parameter.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Parameter.Entity = null;
						previousValue.FloatParameterValues.Remove(this);
					}
					_Parameter.Entity = value;
					if (value != null) {
						value.FloatParameterValues.Add(this);
						_ParameterId = value.Id;
					}
					else {
						_ParameterId = default(int);
					}
					SendPropertyChanged("Parameter");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.FloatProblemCharacteristicValue")]
[KnownType(typeof(FloatProblemCharacteristicValue))]	public partial class FloatProblemCharacteristicValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public FloatProblemCharacteristicValue()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Problem = default(EntityRef<Problem>);
			_ProblemCharacteristic = default(EntityRef<ProblemCharacteristic>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnProblemCharacteristicIdChanging(int value);
		partial void OnProblemCharacteristicIdChanged();
		private int _ProblemCharacteristicId;
		[Column(Storage=@"_ProblemCharacteristicId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ProblemCharacteristicId
		{
			get { return _ProblemCharacteristicId; }
			set {
				if (_ProblemCharacteristicId != value) {
					if (_ProblemCharacteristic.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProblemCharacteristicIdChanging(value);
					SendPropertyChanging();
					_ProblemCharacteristicId = value;
					SendPropertyChanged("ProblemCharacteristicId");
					OnProblemCharacteristicIdChanged();
				}
			}
		}
		
		partial void OnProblemIdChanging(int value);
		partial void OnProblemIdChanged();
		private int _ProblemId;
		[Column(Storage=@"_ProblemId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int ProblemId
		{
			get { return _ProblemId; }
			set {
				if (_ProblemId != value) {
					if (_Problem.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProblemIdChanging(value);
					SendPropertyChanging();
					_ProblemId = value;
					SendPropertyChanged("ProblemId");
					OnProblemIdChanged();
				}
			}
		}
		
		partial void OnValueChanging(double value);
		partial void OnValueChanged();
		private double _Value;
		[Column(Storage=@"_Value", DbType=@"Float NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public double Value
		{
			get { return _Value; }
			set {
				if (_Value != value) {
					OnValueChanging(value);
					SendPropertyChanging();
					_Value = value;
					SendPropertyChanged("Value");
					OnValueChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Problem> _Problem;
		[Association(Name=@"Problem_FloatProblemCharacteristicValue", Storage=@"_Problem", ThisKey=@"ProblemId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Problem Problem
		{
			get {
				return _Problem.Entity;
			}
			set {
				Problem previousValue = _Problem.Entity;
				if ((previousValue != value) || (!_Problem.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Problem.Entity = null;
						previousValue.FloatProblemCharacteristicValues.Remove(this);
					}
					_Problem.Entity = value;
					if (value != null) {
						value.FloatProblemCharacteristicValues.Add(this);
						_ProblemId = value.Id;
					}
					else {
						_ProblemId = default(int);
					}
					SendPropertyChanged("Problem");
				}
			}
		}

		private EntityRef<ProblemCharacteristic> _ProblemCharacteristic;
		[Association(Name=@"ProblemCharacteristic_FloatProblemCharacteristicValue", Storage=@"_ProblemCharacteristic", ThisKey=@"ProblemCharacteristicId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public ProblemCharacteristic ProblemCharacteristic
		{
			get {
				return _ProblemCharacteristic.Entity;
			}
			set {
				ProblemCharacteristic previousValue = _ProblemCharacteristic.Entity;
				if ((previousValue != value) || (!_ProblemCharacteristic.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_ProblemCharacteristic.Entity = null;
						previousValue.FloatProblemCharacteristicValues.Remove(this);
					}
					_ProblemCharacteristic.Entity = value;
					if (value != null) {
						value.FloatProblemCharacteristicValues.Add(this);
						_ProblemCharacteristicId = value.Id;
					}
					else {
						_ProblemCharacteristicId = default(int);
					}
					SendPropertyChanged("ProblemCharacteristic");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.FloatResultValue")]
[KnownType(typeof(FloatResultValue))]	public partial class FloatResultValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public FloatResultValue()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Run = default(EntityRef<Run>);
			_Result = default(EntityRef<Result>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnResultIdChanging(int value);
		partial void OnResultIdChanged();
		private int _ResultId;
		[Column(Storage=@"_ResultId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ResultId
		{
			get { return _ResultId; }
			set {
				if (_ResultId != value) {
					if (_Result.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnResultIdChanging(value);
					SendPropertyChanging();
					_ResultId = value;
					SendPropertyChanged("ResultId");
					OnResultIdChanged();
				}
			}
		}
		
		partial void OnRunIdChanging(int value);
		partial void OnRunIdChanged();
		private int _RunId;
		[Column(Storage=@"_RunId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int RunId
		{
			get { return _RunId; }
			set {
				if (_RunId != value) {
					if (_Run.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnRunIdChanging(value);
					SendPropertyChanging();
					_RunId = value;
					SendPropertyChanged("RunId");
					OnRunIdChanged();
				}
			}
		}
		
		partial void OnValueChanging(double value);
		partial void OnValueChanged();
		private double _Value;
		[Column(Storage=@"_Value", DbType=@"Float NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public double Value
		{
			get { return _Value; }
			set {
				if (_Value != value) {
					OnValueChanging(value);
					SendPropertyChanging();
					_Value = value;
					SendPropertyChanged("Value");
					OnValueChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Run> _Run;
		[Association(Name=@"Run_FloatResultValue", Storage=@"_Run", ThisKey=@"RunId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Run Run
		{
			get {
				return _Run.Entity;
			}
			set {
				Run previousValue = _Run.Entity;
				if ((previousValue != value) || (!_Run.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Run.Entity = null;
						previousValue.FloatResultValues.Remove(this);
					}
					_Run.Entity = value;
					if (value != null) {
						value.FloatResultValues.Add(this);
						_RunId = value.Id;
					}
					else {
						_RunId = default(int);
					}
					SendPropertyChanged("Run");
				}
			}
		}

		private EntityRef<Result> _Result;
		[Association(Name=@"Result_FloatResultValue", Storage=@"_Result", ThisKey=@"ResultId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public Result Result
		{
			get {
				return _Result.Entity;
			}
			set {
				Result previousValue = _Result.Entity;
				if ((previousValue != value) || (!_Result.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Result.Entity = null;
						previousValue.FloatResultValues.Remove(this);
					}
					_Result.Entity = value;
					if (value != null) {
						value.FloatResultValues.Add(this);
						_ResultId = value.Id;
					}
					else {
						_ResultId = default(int);
					}
					SendPropertyChanged("Result");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.IntParameterValue")]
[KnownType(typeof(IntParameterValue))]	public partial class IntParameterValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public IntParameterValue()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Experiment = default(EntityRef<Experiment>);
			_Parameter = default(EntityRef<Parameter>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnParameterIdChanging(int value);
		partial void OnParameterIdChanged();
		private int _ParameterId;
		[Column(Storage=@"_ParameterId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ParameterId
		{
			get { return _ParameterId; }
			set {
				if (_ParameterId != value) {
					if (_Parameter.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnParameterIdChanging(value);
					SendPropertyChanging();
					_ParameterId = value;
					SendPropertyChanged("ParameterId");
					OnParameterIdChanged();
				}
			}
		}
		
		partial void OnExperimentIdChanging(int value);
		partial void OnExperimentIdChanged();
		private int _ExperimentId;
		[Column(Storage=@"_ExperimentId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int ExperimentId
		{
			get { return _ExperimentId; }
			set {
				if (_ExperimentId != value) {
					if (_Experiment.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnExperimentIdChanging(value);
					SendPropertyChanging();
					_ExperimentId = value;
					SendPropertyChanged("ExperimentId");
					OnExperimentIdChanged();
				}
			}
		}
		
		partial void OnValueChanging(int value);
		partial void OnValueChanged();
		private int _Value;
		[Column(Storage=@"_Value", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public int Value
		{
			get { return _Value; }
			set {
				if (_Value != value) {
					OnValueChanging(value);
					SendPropertyChanging();
					_Value = value;
					SendPropertyChanged("Value");
					OnValueChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Experiment> _Experiment;
		[Association(Name=@"Experiment_IntParameterValue", Storage=@"_Experiment", ThisKey=@"ExperimentId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Experiment Experiment
		{
			get {
				return _Experiment.Entity;
			}
			set {
				Experiment previousValue = _Experiment.Entity;
				if ((previousValue != value) || (!_Experiment.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Experiment.Entity = null;
						previousValue.IntParameterValues.Remove(this);
					}
					_Experiment.Entity = value;
					if (value != null) {
						value.IntParameterValues.Add(this);
						_ExperimentId = value.Id;
					}
					else {
						_ExperimentId = default(int);
					}
					SendPropertyChanged("Experiment");
				}
			}
		}

		private EntityRef<Parameter> _Parameter;
		[Association(Name=@"Parameter_IntParameterValue", Storage=@"_Parameter", ThisKey=@"ParameterId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public Parameter Parameter
		{
			get {
				return _Parameter.Entity;
			}
			set {
				Parameter previousValue = _Parameter.Entity;
				if ((previousValue != value) || (!_Parameter.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Parameter.Entity = null;
						previousValue.IntParameterValues.Remove(this);
					}
					_Parameter.Entity = value;
					if (value != null) {
						value.IntParameterValues.Add(this);
						_ParameterId = value.Id;
					}
					else {
						_ParameterId = default(int);
					}
					SendPropertyChanged("Parameter");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.IntProblemCharacteristicValue")]
[KnownType(typeof(IntProblemCharacteristicValue))]	public partial class IntProblemCharacteristicValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public IntProblemCharacteristicValue()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Problem = default(EntityRef<Problem>);
			_ProblemCharacteristic = default(EntityRef<ProblemCharacteristic>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnProblemCharacteristicIdChanging(int value);
		partial void OnProblemCharacteristicIdChanged();
		private int _ProblemCharacteristicId;
		[Column(Storage=@"_ProblemCharacteristicId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ProblemCharacteristicId
		{
			get { return _ProblemCharacteristicId; }
			set {
				if (_ProblemCharacteristicId != value) {
					if (_ProblemCharacteristic.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProblemCharacteristicIdChanging(value);
					SendPropertyChanging();
					_ProblemCharacteristicId = value;
					SendPropertyChanged("ProblemCharacteristicId");
					OnProblemCharacteristicIdChanged();
				}
			}
		}
		
		partial void OnProblemIdChanging(int value);
		partial void OnProblemIdChanged();
		private int _ProblemId;
		[Column(Storage=@"_ProblemId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int ProblemId
		{
			get { return _ProblemId; }
			set {
				if (_ProblemId != value) {
					if (_Problem.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProblemIdChanging(value);
					SendPropertyChanging();
					_ProblemId = value;
					SendPropertyChanged("ProblemId");
					OnProblemIdChanged();
				}
			}
		}
		
		partial void OnValueChanging(int value);
		partial void OnValueChanged();
		private int _Value;
		[Column(Storage=@"_Value", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public int Value
		{
			get { return _Value; }
			set {
				if (_Value != value) {
					OnValueChanging(value);
					SendPropertyChanging();
					_Value = value;
					SendPropertyChanged("Value");
					OnValueChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Problem> _Problem;
		[Association(Name=@"Problem_IntProblemCharacteristicValue", Storage=@"_Problem", ThisKey=@"ProblemId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Problem Problem
		{
			get {
				return _Problem.Entity;
			}
			set {
				Problem previousValue = _Problem.Entity;
				if ((previousValue != value) || (!_Problem.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Problem.Entity = null;
						previousValue.IntProblemCharacteristicValues.Remove(this);
					}
					_Problem.Entity = value;
					if (value != null) {
						value.IntProblemCharacteristicValues.Add(this);
						_ProblemId = value.Id;
					}
					else {
						_ProblemId = default(int);
					}
					SendPropertyChanged("Problem");
				}
			}
		}

		private EntityRef<ProblemCharacteristic> _ProblemCharacteristic;
		[Association(Name=@"ProblemCharacteristic_IntProblemCharacteristicValue", Storage=@"_ProblemCharacteristic", ThisKey=@"ProblemCharacteristicId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public ProblemCharacteristic ProblemCharacteristic
		{
			get {
				return _ProblemCharacteristic.Entity;
			}
			set {
				ProblemCharacteristic previousValue = _ProblemCharacteristic.Entity;
				if ((previousValue != value) || (!_ProblemCharacteristic.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_ProblemCharacteristic.Entity = null;
						previousValue.IntProblemCharacteristicValues.Remove(this);
					}
					_ProblemCharacteristic.Entity = value;
					if (value != null) {
						value.IntProblemCharacteristicValues.Add(this);
						_ProblemCharacteristicId = value.Id;
					}
					else {
						_ProblemCharacteristicId = default(int);
					}
					SendPropertyChanged("ProblemCharacteristic");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.IntResultValue")]
[KnownType(typeof(IntResultValue))]	public partial class IntResultValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public IntResultValue()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Run = default(EntityRef<Run>);
			_Result = default(EntityRef<Result>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnResultIdChanging(int value);
		partial void OnResultIdChanged();
		private int _ResultId;
		[Column(Storage=@"_ResultId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ResultId
		{
			get { return _ResultId; }
			set {
				if (_ResultId != value) {
					if (_Result.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnResultIdChanging(value);
					SendPropertyChanging();
					_ResultId = value;
					SendPropertyChanged("ResultId");
					OnResultIdChanged();
				}
			}
		}
		
		partial void OnRunIdChanging(int value);
		partial void OnRunIdChanged();
		private int _RunId;
		[Column(Storage=@"_RunId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int RunId
		{
			get { return _RunId; }
			set {
				if (_RunId != value) {
					if (_Run.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnRunIdChanging(value);
					SendPropertyChanging();
					_RunId = value;
					SendPropertyChanged("RunId");
					OnRunIdChanged();
				}
			}
		}
		
		partial void OnValueChanging(int value);
		partial void OnValueChanged();
		private int _Value;
		[Column(Storage=@"_Value", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public int Value
		{
			get { return _Value; }
			set {
				if (_Value != value) {
					OnValueChanging(value);
					SendPropertyChanging();
					_Value = value;
					SendPropertyChanged("Value");
					OnValueChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Run> _Run;
		[Association(Name=@"Run_IntResultValue", Storage=@"_Run", ThisKey=@"RunId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Run Run
		{
			get {
				return _Run.Entity;
			}
			set {
				Run previousValue = _Run.Entity;
				if ((previousValue != value) || (!_Run.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Run.Entity = null;
						previousValue.IntResultValues.Remove(this);
					}
					_Run.Entity = value;
					if (value != null) {
						value.IntResultValues.Add(this);
						_RunId = value.Id;
					}
					else {
						_RunId = default(int);
					}
					SendPropertyChanged("Run");
				}
			}
		}

		private EntityRef<Result> _Result;
		[Association(Name=@"Result_IntResultValue", Storage=@"_Result", ThisKey=@"ResultId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public Result Result
		{
			get {
				return _Result.Entity;
			}
			set {
				Result previousValue = _Result.Entity;
				if ((previousValue != value) || (!_Result.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Result.Entity = null;
						previousValue.IntResultValues.Remove(this);
					}
					_Result.Entity = value;
					if (value != null) {
						value.IntResultValues.Add(this);
						_ResultId = value.Id;
					}
					else {
						_ResultId = default(int);
					}
					SendPropertyChanged("Result");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.Platform")]
[KnownType(typeof(Platform))]	public partial class Platform : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Platform()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Problems = new EntitySet<Problem>(attach_Problems, detach_Problems);
			_Algorithms = new EntitySet<Algorithm>(attach_Algorithms, detach_Algorithms);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		private string _Description;
		[Column(Storage=@"_Description", DbType=@"VarChar(MAX)")]
		[DataMember(Order=3)]
		public string Description
		{
			get { return _Description; }
			set {
				if (_Description != value) {
					OnDescriptionChanging(value);
					SendPropertyChanging();
					_Description = value;
					SendPropertyChanged("Description");
					OnDescriptionChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<Problem> _Problems;
		[Association(Name=@"Platform_Problem", Storage=@"_Problems", ThisKey=@"Id", OtherKey=@"PlatformId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Problem> Problems
		{
			get {
				if (serializing && !_Problems.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Problems;
			}
			set {
				_Problems.Assign(value);
			}
		}

		private void attach_Problems(Problem entity)
		{
			SendPropertyChanging();
			entity.Platform = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			SendPropertyChanging();
			entity.Platform = null;
		}
		private EntitySet<Algorithm> _Algorithms;
		[Association(Name=@"Platform_Algorithm", Storage=@"_Algorithms", ThisKey=@"Id", OtherKey=@"PlatformId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Algorithm> Algorithms
		{
			get {
				if (serializing && !_Algorithms.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Algorithms;
			}
			set {
				_Algorithms.Assign(value);
			}
		}

		private void attach_Algorithms(Algorithm entity)
		{
			SendPropertyChanging();
			entity.Platform = this;
		}
		
		private void detach_Algorithms(Algorithm entity)
		{
			SendPropertyChanging();
			entity.Platform = null;
		}
		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.Problem")]
[KnownType(typeof(Problem))]	public partial class Problem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Problem()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_CharProblemCharacteristicValues = new EntitySet<CharProblemCharacteristicValue>(attach_CharProblemCharacteristicValues, detach_CharProblemCharacteristicValues);
			_Experiments = new EntitySet<Experiment>(attach_Experiments, detach_Experiments);
			_FloatProblemCharacteristicValues = new EntitySet<FloatProblemCharacteristicValue>(attach_FloatProblemCharacteristicValues, detach_FloatProblemCharacteristicValues);
			_IntProblemCharacteristicValues = new EntitySet<IntProblemCharacteristicValue>(attach_IntProblemCharacteristicValues, detach_IntProblemCharacteristicValues);
			_Problem_Parameters = new EntitySet<Problem_Parameter>(attach_Problem_Parameters, detach_Problem_Parameters);
			_ProblemData = default(EntityRef<ProblemData>);
			_Platform = default(EntityRef<Platform>);
			_ProblemClass = default(EntityRef<ProblemClass>);
			_SolutionRepresentation = default(EntityRef<SolutionRepresentation>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnProblemClassIdChanging(int value);
		partial void OnProblemClassIdChanged();
		private int _ProblemClassId;
		[Column(Storage=@"_ProblemClassId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public int ProblemClassId
		{
			get { return _ProblemClassId; }
			set {
				if (_ProblemClassId != value) {
					if (_ProblemClass.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProblemClassIdChanging(value);
					SendPropertyChanging();
					_ProblemClassId = value;
					SendPropertyChanged("ProblemClassId");
					OnProblemClassIdChanged();
				}
			}
		}
		
		partial void OnPlatformIdChanging(int value);
		partial void OnPlatformIdChanged();
		private int _PlatformId;
		[Column(Storage=@"_PlatformId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public int PlatformId
		{
			get { return _PlatformId; }
			set {
				if (_PlatformId != value) {
					if (_Platform.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnPlatformIdChanging(value);
					SendPropertyChanging();
					_PlatformId = value;
					SendPropertyChanged("PlatformId");
					OnPlatformIdChanged();
				}
			}
		}
		
		partial void OnSolutionRepresentationIdChanging(int value);
		partial void OnSolutionRepresentationIdChanged();
		private int _SolutionRepresentationId;
		[Column(Storage=@"_SolutionRepresentationId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public int SolutionRepresentationId
		{
			get { return _SolutionRepresentationId; }
			set {
				if (_SolutionRepresentationId != value) {
					if (_SolutionRepresentation.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnSolutionRepresentationIdChanging(value);
					SendPropertyChanging();
					_SolutionRepresentationId = value;
					SendPropertyChanged("SolutionRepresentationId");
					OnSolutionRepresentationIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		private string _Description;
		[Column(Storage=@"_Description", DbType=@"VarChar(MAX)")]
		[DataMember(Order=6)]
		public string Description
		{
			get { return _Description; }
			set {
				if (_Description != value) {
					OnDescriptionChanging(value);
					SendPropertyChanging();
					_Description = value;
					SendPropertyChanged("Description");
					OnDescriptionChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<CharProblemCharacteristicValue> _CharProblemCharacteristicValues;
		[Association(Name=@"Problem_CharProblemCharacteristicValue", Storage=@"_CharProblemCharacteristicValues", ThisKey=@"Id", OtherKey=@"ProblemId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<CharProblemCharacteristicValue> CharProblemCharacteristicValues
		{
			get {
				if (serializing && !_CharProblemCharacteristicValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _CharProblemCharacteristicValues;
			}
			set {
				_CharProblemCharacteristicValues.Assign(value);
			}
		}

		private void attach_CharProblemCharacteristicValues(CharProblemCharacteristicValue entity)
		{
			SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_CharProblemCharacteristicValues(CharProblemCharacteristicValue entity)
		{
			SendPropertyChanging();
			entity.Problem = null;
		}
		private EntitySet<Experiment> _Experiments;
		[Association(Name=@"Problem_Experiment", Storage=@"_Experiments", ThisKey=@"Id", OtherKey=@"ProblemId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<Experiment> Experiments
		{
			get {
				if (serializing && !_Experiments.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Experiments;
			}
			set {
				_Experiments.Assign(value);
			}
		}

		private void attach_Experiments(Experiment entity)
		{
			SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_Experiments(Experiment entity)
		{
			SendPropertyChanging();
			entity.Problem = null;
		}
		private EntitySet<FloatProblemCharacteristicValue> _FloatProblemCharacteristicValues;
		[Association(Name=@"Problem_FloatProblemCharacteristicValue", Storage=@"_FloatProblemCharacteristicValues", ThisKey=@"Id", OtherKey=@"ProblemId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<FloatProblemCharacteristicValue> FloatProblemCharacteristicValues
		{
			get {
				if (serializing && !_FloatProblemCharacteristicValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _FloatProblemCharacteristicValues;
			}
			set {
				_FloatProblemCharacteristicValues.Assign(value);
			}
		}

		private void attach_FloatProblemCharacteristicValues(FloatProblemCharacteristicValue entity)
		{
			SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_FloatProblemCharacteristicValues(FloatProblemCharacteristicValue entity)
		{
			SendPropertyChanging();
			entity.Problem = null;
		}
		private EntitySet<IntProblemCharacteristicValue> _IntProblemCharacteristicValues;
		[Association(Name=@"Problem_IntProblemCharacteristicValue", Storage=@"_IntProblemCharacteristicValues", ThisKey=@"Id", OtherKey=@"ProblemId")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<IntProblemCharacteristicValue> IntProblemCharacteristicValues
		{
			get {
				if (serializing && !_IntProblemCharacteristicValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _IntProblemCharacteristicValues;
			}
			set {
				_IntProblemCharacteristicValues.Assign(value);
			}
		}

		private void attach_IntProblemCharacteristicValues(IntProblemCharacteristicValue entity)
		{
			SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_IntProblemCharacteristicValues(IntProblemCharacteristicValue entity)
		{
			SendPropertyChanging();
			entity.Problem = null;
		}
		private EntitySet<Problem_Parameter> _Problem_Parameters;
		[Association(Name=@"Problem_Problem_Parameter", Storage=@"_Problem_Parameters", ThisKey=@"Id", OtherKey=@"ProblemId")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public EntitySet<Problem_Parameter> Problem_Parameters
		{
			get {
				if (serializing && !_Problem_Parameters.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Problem_Parameters;
			}
			set {
				_Problem_Parameters.Assign(value);
			}
		}

		private void attach_Problem_Parameters(Problem_Parameter entity)
		{
			SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_Problem_Parameters(Problem_Parameter entity)
		{
			SendPropertyChanging();
			entity.Problem = null;
		}
		private EntityRef<ProblemData> _ProblemData;
		[Association(Name=@"Problem_ProblemData", Storage=@"_ProblemData", ThisKey=@"Id", OtherKey=@"ProblemId", IsUnique=true, IsForeignKey=false)]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public ProblemData ProblemData
		{
			get {
				if (serializing && !_ProblemData.HasLoadedOrAssignedValue) {
					return null;
				}
				return _ProblemData.Entity;
			}
			set {
				ProblemData previousValue = _ProblemData.Entity;
				if ((previousValue != value) || (!_ProblemData.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_ProblemData.Entity = null;
						previousValue.Problem = null;
					}
					_ProblemData.Entity = value;
					if (value != null) {
						value.Problem = this;
					}
					SendPropertyChanged("ProblemData");
				}
			}
		}

		private EntityRef<Platform> _Platform;
		[Association(Name=@"Platform_Problem", Storage=@"_Platform", ThisKey=@"PlatformId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public Platform Platform
		{
			get {
				if (serializing && !_Platform.HasLoadedOrAssignedValue) {
					return null;
				}
				return _Platform.Entity;
			}
			set {
				Platform previousValue = _Platform.Entity;
				if ((previousValue != value) || (!_Platform.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Platform.Entity = null;
						previousValue.Problems.Remove(this);
					}
					_Platform.Entity = value;
					if (value != null) {
						value.Problems.Add(this);
						_PlatformId = value.Id;
					}
					else {
						_PlatformId = default(int);
					}
					SendPropertyChanged("Platform");
				}
			}
		}

		private EntityRef<ProblemClass> _ProblemClass;
		[Association(Name=@"ProblemClass_Problem", Storage=@"_ProblemClass", ThisKey=@"ProblemClassId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=14, EmitDefaultValue=false)]
		public ProblemClass ProblemClass
		{
			get {
				if (serializing && !_ProblemClass.HasLoadedOrAssignedValue) {
					return null;
				}
				return _ProblemClass.Entity;
			}
			set {
				ProblemClass previousValue = _ProblemClass.Entity;
				if ((previousValue != value) || (!_ProblemClass.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_ProblemClass.Entity = null;
						previousValue.Problems.Remove(this);
					}
					_ProblemClass.Entity = value;
					if (value != null) {
						value.Problems.Add(this);
						_ProblemClassId = value.Id;
					}
					else {
						_ProblemClassId = default(int);
					}
					SendPropertyChanged("ProblemClass");
				}
			}
		}

		private EntityRef<SolutionRepresentation> _SolutionRepresentation;
		[Association(Name=@"SolutionRepresentation_Problem", Storage=@"_SolutionRepresentation", ThisKey=@"SolutionRepresentationId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=15, EmitDefaultValue=false)]
		public SolutionRepresentation SolutionRepresentation
		{
			get {
				if (serializing && !_SolutionRepresentation.HasLoadedOrAssignedValue) {
					return null;
				}
				return _SolutionRepresentation.Entity;
			}
			set {
				SolutionRepresentation previousValue = _SolutionRepresentation.Entity;
				if ((previousValue != value) || (!_SolutionRepresentation.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_SolutionRepresentation.Entity = null;
						previousValue.Problems.Remove(this);
					}
					_SolutionRepresentation.Entity = value;
					if (value != null) {
						value.Problems.Add(this);
						_SolutionRepresentationId = value.Id;
					}
					else {
						_SolutionRepresentationId = default(int);
					}
					SendPropertyChanged("SolutionRepresentation");
				}
			}
		}

		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.Problem_Parameter")]
[KnownType(typeof(Problem_Parameter))]	public partial class Problem_Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Problem_Parameter()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Parameter = default(EntityRef<Parameter>);
			_Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnProblemIdChanging(int value);
		partial void OnProblemIdChanged();
		private int _ProblemId;
		[Column(Storage=@"_ProblemId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ProblemId
		{
			get { return _ProblemId; }
			set {
				if (_ProblemId != value) {
					if (_Problem.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProblemIdChanging(value);
					SendPropertyChanging();
					_ProblemId = value;
					SendPropertyChanged("ProblemId");
					OnProblemIdChanged();
				}
			}
		}
		
		partial void OnParameterIdChanging(int value);
		partial void OnParameterIdChanged();
		private int _ParameterId;
		[Column(Storage=@"_ParameterId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int ParameterId
		{
			get { return _ParameterId; }
			set {
				if (_ParameterId != value) {
					if (_Parameter.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnParameterIdChanging(value);
					SendPropertyChanging();
					_ParameterId = value;
					SendPropertyChanged("ParameterId");
					OnParameterIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Parameter> _Parameter;
		[Association(Name=@"Parameter_Problem_Parameter", Storage=@"_Parameter", ThisKey=@"ParameterId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public Parameter Parameter
		{
			get {
				return _Parameter.Entity;
			}
			set {
				Parameter previousValue = _Parameter.Entity;
				if ((previousValue != value) || (!_Parameter.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Parameter.Entity = null;
						previousValue.Problem_Parameters.Remove(this);
					}
					_Parameter.Entity = value;
					if (value != null) {
						value.Problem_Parameters.Add(this);
						_ParameterId = value.Id;
					}
					else {
						_ParameterId = default(int);
					}
					SendPropertyChanged("Parameter");
				}
			}
		}

		private EntityRef<Problem> _Problem;
		[Association(Name=@"Problem_Problem_Parameter", Storage=@"_Problem", ThisKey=@"ProblemId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Problem Problem
		{
			get {
				return _Problem.Entity;
			}
			set {
				Problem previousValue = _Problem.Entity;
				if ((previousValue != value) || (!_Problem.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Problem.Entity = null;
						previousValue.Problem_Parameters.Remove(this);
					}
					_Problem.Entity = value;
					if (value != null) {
						value.Problem_Parameters.Add(this);
						_ProblemId = value.Id;
					}
					else {
						_ProblemId = default(int);
					}
					SendPropertyChanged("Problem");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.ProblemCharacteristic")]
[KnownType(typeof(ProblemCharacteristic))]	public partial class ProblemCharacteristic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public ProblemCharacteristic()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_CharProblemCharacteristicValues = new EntitySet<CharProblemCharacteristicValue>(attach_CharProblemCharacteristicValues, detach_CharProblemCharacteristicValues);
			_FloatProblemCharacteristicValues = new EntitySet<FloatProblemCharacteristicValue>(attach_FloatProblemCharacteristicValues, detach_FloatProblemCharacteristicValues);
			_IntProblemCharacteristicValues = new EntitySet<IntProblemCharacteristicValue>(attach_IntProblemCharacteristicValues, detach_IntProblemCharacteristicValues);
			_DataType = default(EntityRef<DataType>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		private string _Description;
		[Column(Storage=@"_Description", DbType=@"VarChar(MAX)")]
		[DataMember(Order=3)]
		public string Description
		{
			get { return _Description; }
			set {
				if (_Description != value) {
					OnDescriptionChanging(value);
					SendPropertyChanging();
					_Description = value;
					SendPropertyChanged("Description");
					OnDescriptionChanged();
				}
			}
		}
		
		partial void OnDataTypeIdChanging(int value);
		partial void OnDataTypeIdChanged();
		private int _DataTypeId;
		[Column(Storage=@"_DataTypeId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public int DataTypeId
		{
			get { return _DataTypeId; }
			set {
				if (_DataTypeId != value) {
					if (_DataType.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnDataTypeIdChanging(value);
					SendPropertyChanging();
					_DataTypeId = value;
					SendPropertyChanged("DataTypeId");
					OnDataTypeIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<CharProblemCharacteristicValue> _CharProblemCharacteristicValues;
		[Association(Name=@"ProblemCharacteristic_CharProblemCharacteristicValue", Storage=@"_CharProblemCharacteristicValues", ThisKey=@"Id", OtherKey=@"ProblemCharacteristicId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<CharProblemCharacteristicValue> CharProblemCharacteristicValues
		{
			get {
				if (serializing && !_CharProblemCharacteristicValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _CharProblemCharacteristicValues;
			}
			set {
				_CharProblemCharacteristicValues.Assign(value);
			}
		}

		private void attach_CharProblemCharacteristicValues(CharProblemCharacteristicValue entity)
		{
			SendPropertyChanging();
			entity.ProblemCharacteristic = this;
		}
		
		private void detach_CharProblemCharacteristicValues(CharProblemCharacteristicValue entity)
		{
			SendPropertyChanging();
			entity.ProblemCharacteristic = null;
		}
		private EntitySet<FloatProblemCharacteristicValue> _FloatProblemCharacteristicValues;
		[Association(Name=@"ProblemCharacteristic_FloatProblemCharacteristicValue", Storage=@"_FloatProblemCharacteristicValues", ThisKey=@"Id", OtherKey=@"ProblemCharacteristicId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<FloatProblemCharacteristicValue> FloatProblemCharacteristicValues
		{
			get {
				if (serializing && !_FloatProblemCharacteristicValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _FloatProblemCharacteristicValues;
			}
			set {
				_FloatProblemCharacteristicValues.Assign(value);
			}
		}

		private void attach_FloatProblemCharacteristicValues(FloatProblemCharacteristicValue entity)
		{
			SendPropertyChanging();
			entity.ProblemCharacteristic = this;
		}
		
		private void detach_FloatProblemCharacteristicValues(FloatProblemCharacteristicValue entity)
		{
			SendPropertyChanging();
			entity.ProblemCharacteristic = null;
		}
		private EntitySet<IntProblemCharacteristicValue> _IntProblemCharacteristicValues;
		[Association(Name=@"ProblemCharacteristic_IntProblemCharacteristicValue", Storage=@"_IntProblemCharacteristicValues", ThisKey=@"Id", OtherKey=@"ProblemCharacteristicId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<IntProblemCharacteristicValue> IntProblemCharacteristicValues
		{
			get {
				if (serializing && !_IntProblemCharacteristicValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _IntProblemCharacteristicValues;
			}
			set {
				_IntProblemCharacteristicValues.Assign(value);
			}
		}

		private void attach_IntProblemCharacteristicValues(IntProblemCharacteristicValue entity)
		{
			SendPropertyChanging();
			entity.ProblemCharacteristic = this;
		}
		
		private void detach_IntProblemCharacteristicValues(IntProblemCharacteristicValue entity)
		{
			SendPropertyChanging();
			entity.ProblemCharacteristic = null;
		}
		private EntityRef<DataType> _DataType;
		[Association(Name=@"DataType_ProblemCharacteristic", Storage=@"_DataType", ThisKey=@"DataTypeId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public DataType DataType
		{
			get {
				if (serializing && !_DataType.HasLoadedOrAssignedValue) {
					return null;
				}
				return _DataType.Entity;
			}
			set {
				DataType previousValue = _DataType.Entity;
				if ((previousValue != value) || (!_DataType.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_DataType.Entity = null;
						previousValue.ProblemCharacteristics.Remove(this);
					}
					_DataType.Entity = value;
					if (value != null) {
						value.ProblemCharacteristics.Add(this);
						_DataTypeId = value.Id;
					}
					else {
						_DataTypeId = default(int);
					}
					SendPropertyChanged("DataType");
				}
			}
		}

		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.ProblemClass")]
[KnownType(typeof(ProblemClass))]	public partial class ProblemClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public ProblemClass()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Problems = new EntitySet<Problem>(attach_Problems, detach_Problems);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		private string _Description;
		[Column(Storage=@"_Description", DbType=@"VarChar(100)")]
		[DataMember(Order=3)]
		public string Description
		{
			get { return _Description; }
			set {
				if (_Description != value) {
					OnDescriptionChanging(value);
					SendPropertyChanging();
					_Description = value;
					SendPropertyChanged("Description");
					OnDescriptionChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<Problem> _Problems;
		[Association(Name=@"ProblemClass_Problem", Storage=@"_Problems", ThisKey=@"Id", OtherKey=@"ProblemClassId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Problem> Problems
		{
			get {
				if (serializing && !_Problems.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Problems;
			}
			set {
				_Problems.Assign(value);
			}
		}

		private void attach_Problems(Problem entity)
		{
			SendPropertyChanging();
			entity.ProblemClass = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			SendPropertyChanging();
			entity.ProblemClass = null;
		}
		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.ProblemData")]
[KnownType(typeof(ProblemData))]	public partial class ProblemData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public ProblemData()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnProblemIdChanging(int value);
		partial void OnProblemIdChanged();
		private int _ProblemId;
		[Column(Storage=@"_ProblemId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ProblemId
		{
			get { return _ProblemId; }
			set {
				if (_ProblemId != value) {
					if (_Problem.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProblemIdChanging(value);
					SendPropertyChanging();
					_ProblemId = value;
					SendPropertyChanged("ProblemId");
					OnProblemIdChanged();
				}
			}
		}
		
		partial void OnDataChanging(Binary value);
		partial void OnDataChanged();
		private Binary _Data;
		[Column(Storage=@"_Data", DbType=@"VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public Binary Data
		{
			get { return _Data; }
			set {
				if (_Data != value) {
					OnDataChanging(value);
					SendPropertyChanging();
					_Data = value;
					SendPropertyChanged("Data");
					OnDataChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Problem> _Problem;
		[Association(Name=@"Problem_ProblemData", Storage=@"_Problem", ThisKey=@"ProblemId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public Problem Problem
		{
			get {
				return _Problem.Entity;
			}
			set {
				Problem previousValue = _Problem.Entity;
				if ((previousValue != value) || (!_Problem.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Problem.Entity = null;
						previousValue.ProblemData = null;
					}
					_Problem.Entity = value;
					if (value != null) {
						value.ProblemData = this;
						_ProblemId = value.Id;
					}
					else {
						_ProblemId = default(int);
					}
					SendPropertyChanged("Problem");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.Project")]
[KnownType(typeof(Project))]	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Project()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Experiments = new EntitySet<Experiment>(attach_Experiments, detach_Experiments);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		private string _Description;
		[Column(Storage=@"_Description", DbType=@"VarChar(MAX)")]
		[DataMember(Order=3)]
		public string Description
		{
			get { return _Description; }
			set {
				if (_Description != value) {
					OnDescriptionChanging(value);
					SendPropertyChanging();
					_Description = value;
					SendPropertyChanged("Description");
					OnDescriptionChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<Experiment> _Experiments;
		[Association(Name=@"Project_Experiment", Storage=@"_Experiments", ThisKey=@"Id", OtherKey=@"ProjectId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Experiment> Experiments
		{
			get {
				if (serializing && !_Experiments.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Experiments;
			}
			set {
				_Experiments.Assign(value);
			}
		}

		private void attach_Experiments(Experiment entity)
		{
			SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Experiments(Experiment entity)
		{
			SendPropertyChanging();
			entity.Project = null;
		}
		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.Run")]
[KnownType(typeof(Run))]	public partial class Run : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Run()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_BlobResultValues = new EntitySet<BlobResultValue>(attach_BlobResultValues, detach_BlobResultValues);
			_CharResultValues = new EntitySet<CharResultValue>(attach_CharResultValues, detach_CharResultValues);
			_FloatResultValues = new EntitySet<FloatResultValue>(attach_FloatResultValues, detach_FloatResultValues);
			_IntResultValues = new EntitySet<IntResultValue>(attach_IntResultValues, detach_IntResultValues);
			_Client = default(EntityRef<Client>);
			_Experiment = default(EntityRef<Experiment>);
			_User = default(EntityRef<User>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnExperimentIdChanging(int value);
		partial void OnExperimentIdChanged();
		private int _ExperimentId;
		[Column(Storage=@"_ExperimentId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public int ExperimentId
		{
			get { return _ExperimentId; }
			set {
				if (_ExperimentId != value) {
					if (_Experiment.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnExperimentIdChanging(value);
					SendPropertyChanging();
					_ExperimentId = value;
					SendPropertyChanged("ExperimentId");
					OnExperimentIdChanged();
				}
			}
		}
		
		partial void OnFinishedDateChanging(DateTime? value);
		partial void OnFinishedDateChanged();
		private DateTime? _FinishedDate;
		[Column(Storage=@"_FinishedDate", DbType=@"DateTime2")]
		[DataMember(Order=3)]
		public DateTime? FinishedDate
		{
			get { return _FinishedDate; }
			set {
				if (_FinishedDate != value) {
					OnFinishedDateChanging(value);
					SendPropertyChanging();
					_FinishedDate = value;
					SendPropertyChanged("FinishedDate");
					OnFinishedDateChanged();
				}
			}
		}
		
		partial void OnUserIdChanging(Guid value);
		partial void OnUserIdChanged();
		private Guid _UserId;
		[Column(Storage=@"_UserId", DbType=@"UniqueIdentifier NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public Guid UserId
		{
			get { return _UserId; }
			set {
				if (_UserId != value) {
					if (_User.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnUserIdChanging(value);
					SendPropertyChanging();
					_UserId = value;
					SendPropertyChanged("UserId");
					OnUserIdChanged();
				}
			}
		}
		
		partial void OnClientIdChanging(Guid value);
		partial void OnClientIdChanged();
		private Guid _ClientId;
		[Column(Storage=@"_ClientId", DbType=@"UniqueIdentifier NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public Guid ClientId
		{
			get { return _ClientId; }
			set {
				if (_ClientId != value) {
					if (_Client.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnClientIdChanging(value);
					SendPropertyChanging();
					_ClientId = value;
					SendPropertyChanged("ClientId");
					OnClientIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<BlobResultValue> _BlobResultValues;
		[Association(Name=@"Run_BlobResultValue", Storage=@"_BlobResultValues", ThisKey=@"Id", OtherKey=@"RunId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<BlobResultValue> BlobResultValues
		{
			get {
				if (serializing && !_BlobResultValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _BlobResultValues;
			}
			set {
				_BlobResultValues.Assign(value);
			}
		}

		private void attach_BlobResultValues(BlobResultValue entity)
		{
			SendPropertyChanging();
			entity.Run = this;
		}
		
		private void detach_BlobResultValues(BlobResultValue entity)
		{
			SendPropertyChanging();
			entity.Run = null;
		}
		private EntitySet<CharResultValue> _CharResultValues;
		[Association(Name=@"Run_CharResultValue", Storage=@"_CharResultValues", ThisKey=@"Id", OtherKey=@"RunId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<CharResultValue> CharResultValues
		{
			get {
				if (serializing && !_CharResultValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _CharResultValues;
			}
			set {
				_CharResultValues.Assign(value);
			}
		}

		private void attach_CharResultValues(CharResultValue entity)
		{
			SendPropertyChanging();
			entity.Run = this;
		}
		
		private void detach_CharResultValues(CharResultValue entity)
		{
			SendPropertyChanging();
			entity.Run = null;
		}
		private EntitySet<FloatResultValue> _FloatResultValues;
		[Association(Name=@"Run_FloatResultValue", Storage=@"_FloatResultValues", ThisKey=@"Id", OtherKey=@"RunId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<FloatResultValue> FloatResultValues
		{
			get {
				if (serializing && !_FloatResultValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _FloatResultValues;
			}
			set {
				_FloatResultValues.Assign(value);
			}
		}

		private void attach_FloatResultValues(FloatResultValue entity)
		{
			SendPropertyChanging();
			entity.Run = this;
		}
		
		private void detach_FloatResultValues(FloatResultValue entity)
		{
			SendPropertyChanging();
			entity.Run = null;
		}
		private EntitySet<IntResultValue> _IntResultValues;
		[Association(Name=@"Run_IntResultValue", Storage=@"_IntResultValues", ThisKey=@"Id", OtherKey=@"RunId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<IntResultValue> IntResultValues
		{
			get {
				if (serializing && !_IntResultValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _IntResultValues;
			}
			set {
				_IntResultValues.Assign(value);
			}
		}

		private void attach_IntResultValues(IntResultValue entity)
		{
			SendPropertyChanging();
			entity.Run = this;
		}
		
		private void detach_IntResultValues(IntResultValue entity)
		{
			SendPropertyChanging();
			entity.Run = null;
		}
		private EntityRef<Client> _Client;
		[Association(Name=@"Client_Run", Storage=@"_Client", ThisKey=@"ClientId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public Client Client
		{
			get {
				if (serializing && !_Client.HasLoadedOrAssignedValue) {
					return null;
				}
				return _Client.Entity;
			}
			set {
				Client previousValue = _Client.Entity;
				if ((previousValue != value) || (!_Client.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Client.Entity = null;
						previousValue.Runs.Remove(this);
					}
					_Client.Entity = value;
					if (value != null) {
						value.Runs.Add(this);
						_ClientId = value.Id;
					}
					else {
						_ClientId = default(Guid);
					}
					SendPropertyChanged("Client");
				}
			}
		}

		private EntityRef<Experiment> _Experiment;
		[Association(Name=@"Experiment_Run", Storage=@"_Experiment", ThisKey=@"ExperimentId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public Experiment Experiment
		{
			get {
				if (serializing && !_Experiment.HasLoadedOrAssignedValue) {
					return null;
				}
				return _Experiment.Entity;
			}
			set {
				Experiment previousValue = _Experiment.Entity;
				if ((previousValue != value) || (!_Experiment.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Experiment.Entity = null;
						previousValue.Runs.Remove(this);
					}
					_Experiment.Entity = value;
					if (value != null) {
						value.Runs.Add(this);
						_ExperimentId = value.Id;
					}
					else {
						_ExperimentId = default(int);
					}
					SendPropertyChanged("Experiment");
				}
			}
		}

		private EntityRef<User> _User;
		[Association(Name=@"User_Run", Storage=@"_User", ThisKey=@"UserId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public User User
		{
			get {
				if (serializing && !_User.HasLoadedOrAssignedValue) {
					return null;
				}
				return _User.Entity;
			}
			set {
				User previousValue = _User.Entity;
				if ((previousValue != value) || (!_User.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_User.Entity = null;
						previousValue.Runs.Remove(this);
					}
					_User.Entity = value;
					if (value != null) {
						value.Runs.Add(this);
						_UserId = value.Id;
					}
					else {
						_UserId = default(Guid);
					}
					SendPropertyChanged("User");
				}
			}
		}

		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.SolutionRepresentation")]
[KnownType(typeof(SolutionRepresentation))]	public partial class SolutionRepresentation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public SolutionRepresentation()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Problems = new EntitySet<Problem>(attach_Problems, detach_Problems);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		private string _Description;
		[Column(Storage=@"_Description", DbType=@"VarChar(MAX)")]
		[DataMember(Order=3)]
		public string Description
		{
			get { return _Description; }
			set {
				if (_Description != value) {
					OnDescriptionChanging(value);
					SendPropertyChanging();
					_Description = value;
					SendPropertyChanged("Description");
					OnDescriptionChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<Problem> _Problems;
		[Association(Name=@"SolutionRepresentation_Problem", Storage=@"_Problems", ThisKey=@"Id", OtherKey=@"SolutionRepresentationId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Problem> Problems
		{
			get {
				if (serializing && !_Problems.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Problems;
			}
			set {
				_Problems.Assign(value);
			}
		}

		private void attach_Problems(Problem entity)
		{
			SendPropertyChanging();
			entity.SolutionRepresentation = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			SendPropertyChanging();
			entity.SolutionRepresentation = null;
		}
		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.Algorithm")]
[KnownType(typeof(Algorithm))]	public partial class Algorithm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Algorithm()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Algorithm_Parameters = new EntitySet<Algorithm_Parameter>(attach_Algorithm_Parameters, detach_Algorithm_Parameters);
			_AlgorithmData = default(EntityRef<AlgorithmData>);
			_Experiments = new EntitySet<Experiment>(attach_Experiments, detach_Experiments);
			_Algorithm_Results = new EntitySet<Algorithm_Result>(attach_Algorithm_Results, detach_Algorithm_Results);
			_AlgorithmClass = default(EntityRef<AlgorithmClass>);
			_Platform = default(EntityRef<Platform>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnAlgorithmClassIdChanging(int value);
		partial void OnAlgorithmClassIdChanged();
		private int _AlgorithmClassId;
		[Column(Storage=@"_AlgorithmClassId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public int AlgorithmClassId
		{
			get { return _AlgorithmClassId; }
			set {
				if (_AlgorithmClassId != value) {
					if (_AlgorithmClass.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnAlgorithmClassIdChanging(value);
					SendPropertyChanging();
					_AlgorithmClassId = value;
					SendPropertyChanged("AlgorithmClassId");
					OnAlgorithmClassIdChanged();
				}
			}
		}
		
		partial void OnPlatformIdChanging(int value);
		partial void OnPlatformIdChanged();
		private int _PlatformId;
		[Column(Storage=@"_PlatformId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public int PlatformId
		{
			get { return _PlatformId; }
			set {
				if (_PlatformId != value) {
					if (_Platform.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnPlatformIdChanging(value);
					SendPropertyChanging();
					_PlatformId = value;
					SendPropertyChanged("PlatformId");
					OnPlatformIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		private string _Description;
		[Column(Storage=@"_Description", DbType=@"VarChar(MAX)")]
		[DataMember(Order=5)]
		public string Description
		{
			get { return _Description; }
			set {
				if (_Description != value) {
					OnDescriptionChanging(value);
					SendPropertyChanging();
					_Description = value;
					SendPropertyChanged("Description");
					OnDescriptionChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<Algorithm_Parameter> _Algorithm_Parameters;
		[Association(Name=@"Algorithm_Algorithm_Parameter", Storage=@"_Algorithm_Parameters", ThisKey=@"Id", OtherKey=@"AlgorithmId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<Algorithm_Parameter> Algorithm_Parameters
		{
			get {
				if (serializing && !_Algorithm_Parameters.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Algorithm_Parameters;
			}
			set {
				_Algorithm_Parameters.Assign(value);
			}
		}

		private void attach_Algorithm_Parameters(Algorithm_Parameter entity)
		{
			SendPropertyChanging();
			entity.Algorithm = this;
		}
		
		private void detach_Algorithm_Parameters(Algorithm_Parameter entity)
		{
			SendPropertyChanging();
			entity.Algorithm = null;
		}
		private EntityRef<AlgorithmData> _AlgorithmData;
		[Association(Name=@"Algorithm_AlgorithmData", Storage=@"_AlgorithmData", ThisKey=@"Id", OtherKey=@"AlgorithmId", IsUnique=true, IsForeignKey=false)]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public AlgorithmData AlgorithmData
		{
			get {
				if (serializing && !_AlgorithmData.HasLoadedOrAssignedValue) {
					return null;
				}
				return _AlgorithmData.Entity;
			}
			set {
				AlgorithmData previousValue = _AlgorithmData.Entity;
				if ((previousValue != value) || (!_AlgorithmData.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_AlgorithmData.Entity = null;
						previousValue.Algorithm = null;
					}
					_AlgorithmData.Entity = value;
					if (value != null) {
						value.Algorithm = this;
					}
					SendPropertyChanged("AlgorithmData");
				}
			}
		}

		private EntitySet<Experiment> _Experiments;
		[Association(Name=@"Algorithm_Experiment", Storage=@"_Experiments", ThisKey=@"Id", OtherKey=@"AlgorithmId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<Experiment> Experiments
		{
			get {
				if (serializing && !_Experiments.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Experiments;
			}
			set {
				_Experiments.Assign(value);
			}
		}

		private void attach_Experiments(Experiment entity)
		{
			SendPropertyChanging();
			entity.Algorithm = this;
		}
		
		private void detach_Experiments(Experiment entity)
		{
			SendPropertyChanging();
			entity.Algorithm = null;
		}
		private EntitySet<Algorithm_Result> _Algorithm_Results;
		[Association(Name=@"Algorithm_Algorithm_Result", Storage=@"_Algorithm_Results", ThisKey=@"Id", OtherKey=@"AlgorithmId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<Algorithm_Result> Algorithm_Results
		{
			get {
				if (serializing && !_Algorithm_Results.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Algorithm_Results;
			}
			set {
				_Algorithm_Results.Assign(value);
			}
		}

		private void attach_Algorithm_Results(Algorithm_Result entity)
		{
			SendPropertyChanging();
			entity.Algorithm = this;
		}
		
		private void detach_Algorithm_Results(Algorithm_Result entity)
		{
			SendPropertyChanging();
			entity.Algorithm = null;
		}
		private EntityRef<AlgorithmClass> _AlgorithmClass;
		[Association(Name=@"AlgorithmClass_Algorithm", Storage=@"_AlgorithmClass", ThisKey=@"AlgorithmClassId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public AlgorithmClass AlgorithmClass
		{
			get {
				if (serializing && !_AlgorithmClass.HasLoadedOrAssignedValue) {
					return null;
				}
				return _AlgorithmClass.Entity;
			}
			set {
				AlgorithmClass previousValue = _AlgorithmClass.Entity;
				if ((previousValue != value) || (!_AlgorithmClass.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_AlgorithmClass.Entity = null;
						previousValue.Algorithms.Remove(this);
					}
					_AlgorithmClass.Entity = value;
					if (value != null) {
						value.Algorithms.Add(this);
						_AlgorithmClassId = value.Id;
					}
					else {
						_AlgorithmClassId = default(int);
					}
					SendPropertyChanged("AlgorithmClass");
				}
			}
		}

		private EntityRef<Platform> _Platform;
		[Association(Name=@"Platform_Algorithm", Storage=@"_Platform", ThisKey=@"PlatformId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public Platform Platform
		{
			get {
				if (serializing && !_Platform.HasLoadedOrAssignedValue) {
					return null;
				}
				return _Platform.Entity;
			}
			set {
				Platform previousValue = _Platform.Entity;
				if ((previousValue != value) || (!_Platform.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Platform.Entity = null;
						previousValue.Algorithms.Remove(this);
					}
					_Platform.Entity = value;
					if (value != null) {
						value.Algorithms.Add(this);
						_PlatformId = value.Id;
					}
					else {
						_PlatformId = default(int);
					}
					SendPropertyChanged("Platform");
				}
			}
		}

		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.Algorithm_Result")]
[KnownType(typeof(Algorithm_Result))]	public partial class Algorithm_Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Algorithm_Result()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Algorithm = default(EntityRef<Algorithm>);
			_Result = default(EntityRef<Result>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnAlgorithmIdChanging(int value);
		partial void OnAlgorithmIdChanged();
		private int _AlgorithmId;
		[Column(Storage=@"_AlgorithmId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int AlgorithmId
		{
			get { return _AlgorithmId; }
			set {
				if (_AlgorithmId != value) {
					if (_Algorithm.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnAlgorithmIdChanging(value);
					SendPropertyChanging();
					_AlgorithmId = value;
					SendPropertyChanged("AlgorithmId");
					OnAlgorithmIdChanged();
				}
			}
		}
		
		partial void OnResultIdChanging(int value);
		partial void OnResultIdChanged();
		private int _ResultId;
		[Column(Storage=@"_ResultId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int ResultId
		{
			get { return _ResultId; }
			set {
				if (_ResultId != value) {
					if (_Result.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnResultIdChanging(value);
					SendPropertyChanging();
					_ResultId = value;
					SendPropertyChanged("ResultId");
					OnResultIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Algorithm> _Algorithm;
		[Association(Name=@"Algorithm_Algorithm_Result", Storage=@"_Algorithm", ThisKey=@"AlgorithmId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public Algorithm Algorithm
		{
			get {
				return _Algorithm.Entity;
			}
			set {
				Algorithm previousValue = _Algorithm.Entity;
				if ((previousValue != value) || (!_Algorithm.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Algorithm.Entity = null;
						previousValue.Algorithm_Results.Remove(this);
					}
					_Algorithm.Entity = value;
					if (value != null) {
						value.Algorithm_Results.Add(this);
						_AlgorithmId = value.Id;
					}
					else {
						_AlgorithmId = default(int);
					}
					SendPropertyChanged("Algorithm");
				}
			}
		}

		private EntityRef<Result> _Result;
		[Association(Name=@"Result_Algorithm_Result", Storage=@"_Result", ThisKey=@"ResultId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Result Result
		{
			get {
				return _Result.Entity;
			}
			set {
				Result previousValue = _Result.Entity;
				if ((previousValue != value) || (!_Result.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Result.Entity = null;
						previousValue.Algorithm_Results.Remove(this);
					}
					_Result.Entity = value;
					if (value != null) {
						value.Algorithm_Results.Add(this);
						_ResultId = value.Id;
					}
					else {
						_ResultId = default(int);
					}
					SendPropertyChanged("Result");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.Result")]
[KnownType(typeof(Result))]	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Result()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_BlobResultValues = new EntitySet<BlobResultValue>(attach_BlobResultValues, detach_BlobResultValues);
			_CharResultValues = new EntitySet<CharResultValue>(attach_CharResultValues, detach_CharResultValues);
			_FloatResultValues = new EntitySet<FloatResultValue>(attach_FloatResultValues, detach_FloatResultValues);
			_IntResultValues = new EntitySet<IntResultValue>(attach_IntResultValues, detach_IntResultValues);
			_Algorithm_Results = new EntitySet<Algorithm_Result>(attach_Algorithm_Results, detach_Algorithm_Results);
			_DataType = default(EntityRef<DataType>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		private string _Description;
		[Column(Storage=@"_Description", DbType=@"VarChar(MAX)")]
		[DataMember(Order=3)]
		public string Description
		{
			get { return _Description; }
			set {
				if (_Description != value) {
					OnDescriptionChanging(value);
					SendPropertyChanging();
					_Description = value;
					SendPropertyChanged("Description");
					OnDescriptionChanged();
				}
			}
		}
		
		partial void OnDataTypeIdChanging(int value);
		partial void OnDataTypeIdChanged();
		private int _DataTypeId;
		[Column(Storage=@"_DataTypeId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public int DataTypeId
		{
			get { return _DataTypeId; }
			set {
				if (_DataTypeId != value) {
					if (_DataType.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnDataTypeIdChanging(value);
					SendPropertyChanging();
					_DataTypeId = value;
					SendPropertyChanged("DataTypeId");
					OnDataTypeIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<BlobResultValue> _BlobResultValues;
		[Association(Name=@"Result_BlobResultValue", Storage=@"_BlobResultValues", ThisKey=@"Id", OtherKey=@"ResultId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<BlobResultValue> BlobResultValues
		{
			get {
				if (serializing && !_BlobResultValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _BlobResultValues;
			}
			set {
				_BlobResultValues.Assign(value);
			}
		}

		private void attach_BlobResultValues(BlobResultValue entity)
		{
			SendPropertyChanging();
			entity.Result = this;
		}
		
		private void detach_BlobResultValues(BlobResultValue entity)
		{
			SendPropertyChanging();
			entity.Result = null;
		}
		private EntitySet<CharResultValue> _CharResultValues;
		[Association(Name=@"Result_CharResultValue", Storage=@"_CharResultValues", ThisKey=@"Id", OtherKey=@"ResultId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<CharResultValue> CharResultValues
		{
			get {
				if (serializing && !_CharResultValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _CharResultValues;
			}
			set {
				_CharResultValues.Assign(value);
			}
		}

		private void attach_CharResultValues(CharResultValue entity)
		{
			SendPropertyChanging();
			entity.Result = this;
		}
		
		private void detach_CharResultValues(CharResultValue entity)
		{
			SendPropertyChanging();
			entity.Result = null;
		}
		private EntitySet<FloatResultValue> _FloatResultValues;
		[Association(Name=@"Result_FloatResultValue", Storage=@"_FloatResultValues", ThisKey=@"Id", OtherKey=@"ResultId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<FloatResultValue> FloatResultValues
		{
			get {
				if (serializing && !_FloatResultValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _FloatResultValues;
			}
			set {
				_FloatResultValues.Assign(value);
			}
		}

		private void attach_FloatResultValues(FloatResultValue entity)
		{
			SendPropertyChanging();
			entity.Result = this;
		}
		
		private void detach_FloatResultValues(FloatResultValue entity)
		{
			SendPropertyChanging();
			entity.Result = null;
		}
		private EntitySet<IntResultValue> _IntResultValues;
		[Association(Name=@"Result_IntResultValue", Storage=@"_IntResultValues", ThisKey=@"Id", OtherKey=@"ResultId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<IntResultValue> IntResultValues
		{
			get {
				if (serializing && !_IntResultValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _IntResultValues;
			}
			set {
				_IntResultValues.Assign(value);
			}
		}

		private void attach_IntResultValues(IntResultValue entity)
		{
			SendPropertyChanging();
			entity.Result = this;
		}
		
		private void detach_IntResultValues(IntResultValue entity)
		{
			SendPropertyChanging();
			entity.Result = null;
		}
		private EntitySet<Algorithm_Result> _Algorithm_Results;
		[Association(Name=@"Result_Algorithm_Result", Storage=@"_Algorithm_Results", ThisKey=@"Id", OtherKey=@"ResultId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<Algorithm_Result> Algorithm_Results
		{
			get {
				if (serializing && !_Algorithm_Results.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Algorithm_Results;
			}
			set {
				_Algorithm_Results.Assign(value);
			}
		}

		private void attach_Algorithm_Results(Algorithm_Result entity)
		{
			SendPropertyChanging();
			entity.Result = this;
		}
		
		private void detach_Algorithm_Results(Algorithm_Result entity)
		{
			SendPropertyChanging();
			entity.Result = null;
		}
		private EntityRef<DataType> _DataType;
		[Association(Name=@"DataType_Result", Storage=@"_DataType", ThisKey=@"DataTypeId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public DataType DataType
		{
			get {
				if (serializing && !_DataType.HasLoadedOrAssignedValue) {
					return null;
				}
				return _DataType.Entity;
			}
			set {
				DataType previousValue = _DataType.Entity;
				if ((previousValue != value) || (!_DataType.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_DataType.Entity = null;
						previousValue.Results.Remove(this);
					}
					_DataType.Entity = value;
					if (value != null) {
						value.Results.Add(this);
						_DataTypeId = value.Id;
					}
					else {
						_DataTypeId = default(int);
					}
					SendPropertyChanged("DataType");
				}
			}
		}

		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.OperatorParameterValue")]
[KnownType(typeof(OperatorParameterValue))]	public partial class OperatorParameterValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public OperatorParameterValue()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_DataType = default(EntityRef<DataType>);
			_Experiment = default(EntityRef<Experiment>);
			_Parameter = default(EntityRef<Parameter>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnParameterIdChanging(int value);
		partial void OnParameterIdChanged();
		private int _ParameterId;
		[Column(Storage=@"_ParameterId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int ParameterId
		{
			get { return _ParameterId; }
			set {
				if (_ParameterId != value) {
					if (_Parameter.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnParameterIdChanging(value);
					SendPropertyChanging();
					_ParameterId = value;
					SendPropertyChanged("ParameterId");
					OnParameterIdChanged();
				}
			}
		}
		
		partial void OnExperimentIdChanging(int value);
		partial void OnExperimentIdChanged();
		private int _ExperimentId;
		[Column(Storage=@"_ExperimentId", DbType=@"Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int ExperimentId
		{
			get { return _ExperimentId; }
			set {
				if (_ExperimentId != value) {
					if (_Experiment.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnExperimentIdChanging(value);
					SendPropertyChanging();
					_ExperimentId = value;
					SendPropertyChanged("ExperimentId");
					OnExperimentIdChanged();
				}
			}
		}
		
		partial void OnValueChanging(Binary value);
		partial void OnValueChanged();
		private Binary _Value;
		[Column(Storage=@"_Value", DbType=@"VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public Binary Value
		{
			get { return _Value; }
			set {
				if (_Value != value) {
					OnValueChanging(value);
					SendPropertyChanging();
					_Value = value;
					SendPropertyChanged("Value");
					OnValueChanged();
				}
			}
		}
		
		partial void OnDataTypeIdChanging(int value);
		partial void OnDataTypeIdChanged();
		private int _DataTypeId;
		[Column(Storage=@"_DataTypeId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public int DataTypeId
		{
			get { return _DataTypeId; }
			set {
				if (_DataTypeId != value) {
					if (_DataType.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnDataTypeIdChanging(value);
					SendPropertyChanging();
					_DataTypeId = value;
					SendPropertyChanged("DataTypeId");
					OnDataTypeIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<DataType> _DataType;
		[Association(Name=@"DataType_OperatorParameterValue", Storage=@"_DataType", ThisKey=@"DataTypeId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public DataType DataType
		{
			get {
				return _DataType.Entity;
			}
			set {
				DataType previousValue = _DataType.Entity;
				if ((previousValue != value) || (!_DataType.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_DataType.Entity = null;
						previousValue.OperatorParameterValues.Remove(this);
					}
					_DataType.Entity = value;
					if (value != null) {
						value.OperatorParameterValues.Add(this);
						_DataTypeId = value.Id;
					}
					else {
						_DataTypeId = default(int);
					}
					SendPropertyChanged("DataType");
				}
			}
		}

		private EntityRef<Experiment> _Experiment;
		[Association(Name=@"Experiment_OperatorParameterValue", Storage=@"_Experiment", ThisKey=@"ExperimentId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public Experiment Experiment
		{
			get {
				return _Experiment.Entity;
			}
			set {
				Experiment previousValue = _Experiment.Entity;
				if ((previousValue != value) || (!_Experiment.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Experiment.Entity = null;
						previousValue.OperatorParameterValues.Remove(this);
					}
					_Experiment.Entity = value;
					if (value != null) {
						value.OperatorParameterValues.Add(this);
						_ExperimentId = value.Id;
					}
					else {
						_ExperimentId = default(int);
					}
					SendPropertyChanged("Experiment");
				}
			}
		}

		private EntityRef<Parameter> _Parameter;
		[Association(Name=@"Parameter_OperatorParameterValue", Storage=@"_Parameter", ThisKey=@"ParameterId", OtherKey=@"Id", IsForeignKey=true)]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public Parameter Parameter
		{
			get {
				return _Parameter.Entity;
			}
			set {
				Parameter previousValue = _Parameter.Entity;
				if ((previousValue != value) || (!_Parameter.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Parameter.Entity = null;
						previousValue.OperatorParameterValues.Remove(this);
					}
					_Parameter.Entity = value;
					if (value != null) {
						value.OperatorParameterValues.Add(this);
						_ParameterId = value.Id;
					}
					else {
						_ParameterId = default(int);
					}
					SendPropertyChanged("Parameter");
				}
			}
		}

		#endregion
		
		#region Serialization
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}

namespace HeuristicLab.Services.OKB.DataAccess
{	
	[DataContract(IsReference=true)]
	[Table(Name=@"dbo.Parameter")]
[KnownType(typeof(Parameter))]	public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Parameter()
		{
			Initialize();
		}
		
		private void Initialize()
		{
			_Algorithm_Parameters = new EntitySet<Algorithm_Parameter>(attach_Algorithm_Parameters, detach_Algorithm_Parameters);
			_CharParameterValues = new EntitySet<CharParameterValue>(attach_CharParameterValues, detach_CharParameterValues);
			_FloatParameterValues = new EntitySet<FloatParameterValue>(attach_FloatParameterValues, detach_FloatParameterValues);
			_IntParameterValues = new EntitySet<IntParameterValue>(attach_IntParameterValues, detach_IntParameterValues);
			_Problem_Parameters = new EntitySet<Problem_Parameter>(attach_Problem_Parameters, detach_Problem_Parameters);
			_OperatorParameterValues = new EntitySet<OperatorParameterValue>(attach_OperatorParameterValues, detach_OperatorParameterValues);
			_DataType = default(EntityRef<DataType>);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		private string _Description;
		[Column(Storage=@"_Description", DbType=@"VarChar(MAX)")]
		[DataMember(Order=3)]
		public string Description
		{
			get { return _Description; }
			set {
				if (_Description != value) {
					OnDescriptionChanging(value);
					SendPropertyChanging();
					_Description = value;
					SendPropertyChanged("Description");
					OnDescriptionChanged();
				}
			}
		}
		
		partial void OnDataTypeIdChanging(int value);
		partial void OnDataTypeIdChanged();
		private int _DataTypeId;
		[Column(Storage=@"_DataTypeId", DbType=@"Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public int DataTypeId
		{
			get { return _DataTypeId; }
			set {
				if (_DataTypeId != value) {
					if (_DataType.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnDataTypeIdChanging(value);
					SendPropertyChanging();
					_DataTypeId = value;
					SendPropertyChanged("DataTypeId");
					OnDataTypeIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<Algorithm_Parameter> _Algorithm_Parameters;
		[Association(Name=@"Parameter_Algorithm_Parameter", Storage=@"_Algorithm_Parameters", ThisKey=@"Id", OtherKey=@"ParameterId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Algorithm_Parameter> Algorithm_Parameters
		{
			get {
				if (serializing && !_Algorithm_Parameters.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Algorithm_Parameters;
			}
			set {
				_Algorithm_Parameters.Assign(value);
			}
		}

		private void attach_Algorithm_Parameters(Algorithm_Parameter entity)
		{
			SendPropertyChanging();
			entity.Parameter = this;
		}
		
		private void detach_Algorithm_Parameters(Algorithm_Parameter entity)
		{
			SendPropertyChanging();
			entity.Parameter = null;
		}
		private EntitySet<CharParameterValue> _CharParameterValues;
		[Association(Name=@"Parameter_CharParameterValue", Storage=@"_CharParameterValues", ThisKey=@"Id", OtherKey=@"ParameterId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<CharParameterValue> CharParameterValues
		{
			get {
				if (serializing && !_CharParameterValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _CharParameterValues;
			}
			set {
				_CharParameterValues.Assign(value);
			}
		}

		private void attach_CharParameterValues(CharParameterValue entity)
		{
			SendPropertyChanging();
			entity.Parameter = this;
		}
		
		private void detach_CharParameterValues(CharParameterValue entity)
		{
			SendPropertyChanging();
			entity.Parameter = null;
		}
		private EntitySet<FloatParameterValue> _FloatParameterValues;
		[Association(Name=@"Parameter_FloatParameterValue", Storage=@"_FloatParameterValues", ThisKey=@"Id", OtherKey=@"ParameterId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<FloatParameterValue> FloatParameterValues
		{
			get {
				if (serializing && !_FloatParameterValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _FloatParameterValues;
			}
			set {
				_FloatParameterValues.Assign(value);
			}
		}

		private void attach_FloatParameterValues(FloatParameterValue entity)
		{
			SendPropertyChanging();
			entity.Parameter = this;
		}
		
		private void detach_FloatParameterValues(FloatParameterValue entity)
		{
			SendPropertyChanging();
			entity.Parameter = null;
		}
		private EntitySet<IntParameterValue> _IntParameterValues;
		[Association(Name=@"Parameter_IntParameterValue", Storage=@"_IntParameterValues", ThisKey=@"Id", OtherKey=@"ParameterId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<IntParameterValue> IntParameterValues
		{
			get {
				if (serializing && !_IntParameterValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _IntParameterValues;
			}
			set {
				_IntParameterValues.Assign(value);
			}
		}

		private void attach_IntParameterValues(IntParameterValue entity)
		{
			SendPropertyChanging();
			entity.Parameter = this;
		}
		
		private void detach_IntParameterValues(IntParameterValue entity)
		{
			SendPropertyChanging();
			entity.Parameter = null;
		}
		private EntitySet<Problem_Parameter> _Problem_Parameters;
		[Association(Name=@"Parameter_Problem_Parameter", Storage=@"_Problem_Parameters", ThisKey=@"Id", OtherKey=@"ParameterId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<Problem_Parameter> Problem_Parameters
		{
			get {
				if (serializing && !_Problem_Parameters.HasLoadedOrAssignedValues) {
					return null;
				}
				return _Problem_Parameters;
			}
			set {
				_Problem_Parameters.Assign(value);
			}
		}

		private void attach_Problem_Parameters(Problem_Parameter entity)
		{
			SendPropertyChanging();
			entity.Parameter = this;
		}
		
		private void detach_Problem_Parameters(Problem_Parameter entity)
		{
			SendPropertyChanging();
			entity.Parameter = null;
		}
		private EntitySet<OperatorParameterValue> _OperatorParameterValues;
		[Association(Name=@"Parameter_OperatorParameterValue", Storage=@"_OperatorParameterValues", ThisKey=@"Id", OtherKey=@"ParameterId")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<OperatorParameterValue> OperatorParameterValues
		{
			get {
				if (serializing && !_OperatorParameterValues.HasLoadedOrAssignedValues) {
					return null;
				}
				return _OperatorParameterValues;
			}
			set {
				_OperatorParameterValues.Assign(value);
			}
		}

		private void attach_OperatorParameterValues(OperatorParameterValue entity)
		{
			SendPropertyChanging();
			entity.Parameter = this;
		}
		
		private void detach_OperatorParameterValues(OperatorParameterValue entity)
		{
			SendPropertyChanging();
			entity.Parameter = null;
		}
		private EntityRef<DataType> _DataType;
		[Association(Name=@"DataType_Parameter", Storage=@"_DataType", ThisKey=@"DataTypeId", OtherKey=@"Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule=@"CASCADE")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public DataType DataType
		{
			get {
				if (serializing && !_DataType.HasLoadedOrAssignedValue) {
					return null;
				}
				return _DataType.Entity;
			}
			set {
				DataType previousValue = _DataType.Entity;
				if ((previousValue != value) || (!_DataType.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_DataType.Entity = null;
						previousValue.Parameters.Remove(this);
					}
					_DataType.Entity = value;
					if (value != null) {
						value.Parameters.Add(this);
						_DataTypeId = value.Id;
					}
					else {
						_DataTypeId = default(int);
					}
					SendPropertyChanged("DataType");
				}
			}
		}

		#endregion
		
		#region Serialization
		private bool serializing;
		
		[OnSerializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			serializing = true;
		}
		
		[OnSerialized()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			serializing = false;
		}
		
		[OnDeserializing()]
		[EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public  void OnDeserializing(StreamingContext context)
		{
			Initialize();
		}
		#endregion
	}
}
#pragma warning restore 1591