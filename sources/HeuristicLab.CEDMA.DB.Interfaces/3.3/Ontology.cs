#region License Information
/* HeuristicLab
 * Copyright (C) 2002-2008 Heuristic and Evolutionary Algorithms Laboratory (HEAL)
 *
 * This file is part of HeuristicLab.
 *
 * HeuristicLab is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * HeuristicLab is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with HeuristicLab. If not, see <http://www.gnu.org/licenses/>.
 */
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using HeuristicLab.CEDMA.DB.Interfaces;
using System.Runtime.Serialization;

namespace HeuristicLab.CEDMA.DB.Interfaces {
  public static class Ontology {
    public static string CedmaNameSpace {
      get { return "http://www.heuristiclab.com/cedma/"; }
    }

    #region model attribute types
    /// <summary>
    /// Attribute value is ordinal, values can be sorted.
    /// Examples are quality measures or complexity measures.
    /// </summary>
    public static Entity TypeOrdinalAttribute {
      get { return new Entity(CedmaNameSpace + "TypeOrdinalAttribute"); }
    }
    /// <summary>
    /// Attribute value is categorical and thus can't be sorted.
    /// Examples is target-variable.
    /// </summary>
    public static Entity TypeCategoricalAttribute {
      get { return new Entity(CedmaNameSpace + "TypeCategoricalAttribute"); }
    }
    /// <summary>
    /// Attribute is a quality measure
    /// </summary>
    public static Entity TypeQualityAttribute {
      get { return new Entity(CedmaNameSpace + "TypeQualityAttribute"); }
    }
    /// <summary>
    /// Attribute is a complexity measure
    /// </summary>
    public static Entity TypeComplexityAttribute {
      get { return new Entity(CedmaNameSpace + "TypeComplexityAttribute"); }
    }
    #endregion

    #region meta-data predicates
    public static Entity PredicateName {
      get { return new Entity(CedmaNameSpace + "Name"); }
    }
    /// <summary>
    /// Each entity can have a serialized XML representation that can be loaded in HL.
    /// </summary>
    public static Entity PredicateSerializedData {
      get { return new Entity(CedmaNameSpace + "SerializedData"); }
    }
    /// <summary>
    /// Link from data set to model.
    /// A data set can have multiple models.
    /// </summary>
    public static Entity PredicateHasModel {
      get { return new Entity(CedmaNameSpace + "Model"); }
    }
    /// <summary>
    /// Link from model to algorithm.
    /// An algorithm can generate multiple models, each model is generated by exactly one algorithm.
    /// </summary>
    public static Entity PredicateGeneratedBy {
      get { return new Entity(CedmaNameSpace + "GeneratedBy"); }
    }
    #endregion

    #region types and type relations
    public static Entity PredicateInstanceOf {
      get { return new Entity(CedmaNameSpace + "InstanceOf"); }
    }
    public static Entity TypeDataSet {
      get { return new Entity(CedmaNameSpace + "DataSet"); }
    }
    public static Entity TypeAlgorithm {
      get { return new Entity(CedmaNameSpace + "Algorithm"); }
    }
    public static Entity TypeModel {
      get { return new Entity(CedmaNameSpace + "Model"); }
    }
    #endregion

    #region default attributes
    public static Entity TargetVariable {
      get { return new Entity(CedmaNameSpace + "TargetVariable"); }
    }
    public static Entity AlgorithmName {
      get { return new Entity(CedmaNameSpace + "AlgorithmName"); }
    }
    public static Entity TrainingMeanSquaredError {
      get { return new Entity(CedmaNameSpace + "TrainingMeanSquaredError"); }
    }
    public static Entity ValidationMeanSquaredError {
      get { return new Entity(CedmaNameSpace + "ValidationMeanSquaredError"); }
    }
    public static Entity TestMeanSquaredError {
      get { return new Entity(CedmaNameSpace + "TestMeanSquaredError"); }
    }
    public static Entity TrainingMeanAbsolutePercentageError {
      get { return new Entity(CedmaNameSpace + "TrainingMeanAbsolutePercentageError"); }
    }
    public static Entity ValidationMeanAbsolutePercentageError {
      get { return new Entity(CedmaNameSpace + "ValidationMeanAbsolutePercentageError"); }
    }
    public static Entity TestMeanAbsolutePercentageError {
      get { return new Entity(CedmaNameSpace + "TestMeanAbsolutePercentageError"); }
    }
    public static Entity TrainingMeanAbsolutePercentageOfRangeError {
      get { return new Entity(CedmaNameSpace + "TrainingMeanAbsolutePercentageOfRangeError"); }
    }
    public static Entity ValidationMeanAbsolutePercentageOfRangeError {
      get { return new Entity(CedmaNameSpace + "ValidationMeanAbsolutePercentageOfRangeError"); }
    }
    public static Entity TestMeanAbsolutePercentageOfRangeError {
      get { return new Entity(CedmaNameSpace + "TestMeanAbsolutePercentageOfRangeError"); }
    }
    public static Entity TrainingCoefficientOfDetermination {
      get { return new Entity(CedmaNameSpace + "TrainingCoefficientOfDetermination"); }
    }
    public static Entity ValidationCoefficientOfDetermination {
      get { return new Entity(CedmaNameSpace + "ValidationCoefficientOfDetermination"); }
    }
    public static Entity TestCoefficientOfDetermination {
      get { return new Entity(CedmaNameSpace + "TestCoefficientOfDetermination"); }
    }
    public static Entity TrainingAccuracy {
      get { return new Entity(CedmaNameSpace + "TrainingAccuracy"); }
    }
    public static Entity ValidationAccuracy {
      get { return new Entity(CedmaNameSpace + "ValidationAccuracy"); }
    }
    public static Entity TestAccuracy {
      get { return new Entity(CedmaNameSpace + "TestAccuracy"); }
    }
    public static Entity TrainingTheilsInequalityCoefficient {
      get { return new Entity(CedmaNameSpace + "TrainingTheilsInequalityCoefficient"); }
    }
    public static Entity ValidationTheilsInequalityCoefficient {
      get { return new Entity(CedmaNameSpace + "ValidationTheilsInequalityCoefficient"); }
    }
    public static Entity TestTheilsInequalityCoefficient {
      get { return new Entity(CedmaNameSpace + "TestTheilsInequalityCoefficient"); }
    }
    public static Entity TreeSize {
      get { return new Entity(CedmaNameSpace + "TreeSize"); }
    }
    public static Entity TreeHeight {
      get { return new Entity(CedmaNameSpace + "TreeHeight"); }
    }
    public static Entity EvaluatedSolutions {
      get { return new Entity(CedmaNameSpace + "EvaluatedSolutions"); }
    }
    #endregion

    public static ICollection<Statement> InitialStatements {
      get {
        return new List<Statement> {
          new Statement(TargetVariable, PredicateInstanceOf, TypeCategoricalAttribute),
          new Statement(AlgorithmName, PredicateInstanceOf, TypeCategoricalAttribute),
          new Statement(TrainingMeanSquaredError, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TrainingMeanSquaredError, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(ValidationMeanSquaredError, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(ValidationMeanSquaredError, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(TestMeanSquaredError, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TestMeanSquaredError, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(TrainingMeanAbsolutePercentageError, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TrainingMeanAbsolutePercentageError, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(ValidationMeanAbsolutePercentageError, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(ValidationMeanAbsolutePercentageError, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(TestMeanAbsolutePercentageError, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TestMeanAbsolutePercentageError, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(TrainingMeanAbsolutePercentageOfRangeError, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TrainingMeanAbsolutePercentageOfRangeError, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(ValidationMeanAbsolutePercentageOfRangeError, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(ValidationMeanAbsolutePercentageOfRangeError, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(TestMeanAbsolutePercentageOfRangeError, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TestMeanAbsolutePercentageOfRangeError, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(TrainingCoefficientOfDetermination, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TrainingCoefficientOfDetermination, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(ValidationCoefficientOfDetermination, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(ValidationCoefficientOfDetermination, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(TestCoefficientOfDetermination, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TestCoefficientOfDetermination, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(TrainingAccuracy, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TrainingAccuracy, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(ValidationAccuracy, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(ValidationAccuracy, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(TestAccuracy, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TestAccuracy, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(TrainingTheilsInequalityCoefficient, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TrainingTheilsInequalityCoefficient, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(ValidationTheilsInequalityCoefficient, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(ValidationTheilsInequalityCoefficient, PredicateInstanceOf, TypeQualityAttribute),
          new Statement(TestTheilsInequalityCoefficient, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TestTheilsInequalityCoefficient, PredicateInstanceOf, TypeQualityAttribute),

          new Statement(TreeSize, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TreeSize, PredicateInstanceOf, TypeComplexityAttribute),
          new Statement(TreeHeight, PredicateInstanceOf, TypeOrdinalAttribute),
          new Statement(TreeHeight, PredicateInstanceOf, TypeComplexityAttribute),
          new Statement(EvaluatedSolutions, PredicateInstanceOf, TypeOrdinalAttribute)
        };
      }
    }


    /// <summary>
    /// Wildcard entity for filtering.
    /// </summary>
    public static Entity AnyEntity {
      get { return new Entity(null); }
    }
  }
}
