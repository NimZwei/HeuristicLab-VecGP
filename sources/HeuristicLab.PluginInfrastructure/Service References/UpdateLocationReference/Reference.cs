//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HeuristicLab.PluginInfrastructure.UpdateLocationReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PluginInformation", Namespace="http://schemas.datacontract.org/2004/07/HeuristicLab.Update.Service")]
    [System.SerializableAttribute()]
    internal partial class PluginInformation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BuildDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Version VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.DateTime BuildDate {
            get {
                return this.BuildDateField;
            }
            set {
                if ((this.BuildDateField.Equals(value) != true)) {
                    this.BuildDateField = value;
                    this.RaisePropertyChanged("BuildDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Version Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UpdateLocationReference.IUpdateLocation")]
    internal interface IUpdateLocation {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdateLocation/GetAvailablePluginsByName", ReplyAction="http://tempuri.org/IUpdateLocation/GetAvailablePluginsByNameResponse")]
        HeuristicLab.PluginInfrastructure.UpdateLocationReference.PluginInformation[] GetAvailablePluginsByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdateLocation/GetPluginFiles", ReplyAction="http://tempuri.org/IUpdateLocation/GetPluginFilesResponse")]
        byte[][] GetPluginFiles(HeuristicLab.PluginInfrastructure.UpdateLocationReference.PluginInformation info);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    internal interface IUpdateLocationChannel : HeuristicLab.PluginInfrastructure.UpdateLocationReference.IUpdateLocation, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    internal partial class UpdateLocationClient : System.ServiceModel.ClientBase<HeuristicLab.PluginInfrastructure.UpdateLocationReference.IUpdateLocation>, HeuristicLab.PluginInfrastructure.UpdateLocationReference.IUpdateLocation {
        
        public UpdateLocationClient() {
        }
        
        public UpdateLocationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UpdateLocationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpdateLocationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpdateLocationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HeuristicLab.PluginInfrastructure.UpdateLocationReference.PluginInformation[] GetAvailablePluginsByName(string name) {
            return base.Channel.GetAvailablePluginsByName(name);
        }
        
        public byte[][] GetPluginFiles(HeuristicLab.PluginInfrastructure.UpdateLocationReference.PluginInformation info) {
            return base.Channel.GetPluginFiles(info);
        }
    }
}
