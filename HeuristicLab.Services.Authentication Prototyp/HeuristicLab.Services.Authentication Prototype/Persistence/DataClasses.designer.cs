#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.4927
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Persistence
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHeuristicLabUser(HeuristicLabUser instance);
    partial void UpdateHeuristicLabUser(HeuristicLabUser instance);
    partial void DeleteHeuristicLabUser(HeuristicLabUser instance);
    partial void InsertHeuristicLabRole(HeuristicLabRole instance);
    partial void UpdateHeuristicLabRole(HeuristicLabRole instance);
    partial void DeleteHeuristicLabRole(HeuristicLabRole instance);
    partial void InsertHeuristicLabUserRole(HeuristicLabUserRole instance);
    partial void UpdateHeuristicLabUserRole(HeuristicLabUserRole instance);
    partial void DeleteHeuristicLabUserRole(HeuristicLabUserRole instance);
    #endregion
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<HeuristicLabUser> HeuristicLabUsers
		{
			get
			{
				return this.GetTable<HeuristicLabUser>();
			}
		}
		
		public System.Data.Linq.Table<HeuristicLabRole> HeuristicLabRole
		{
			get
			{
				return this.GetTable<HeuristicLabRole>();
			}
		}
		
		public System.Data.Linq.Table<HeuristicLabUserRole> HeuristicLabUserRole
		{
			get
			{
				return this.GetTable<HeuristicLabUserRole>();
			}
		}
	}
	
	[Table(Name="")]
	[DataContract()]
	public partial class HeuristicLabUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id = default(long);
		
		private string _UserName = default(string);
		
		private string _Password;
		
		private System.DateTime _LastPasswordChangedDate = default(System.DateTime);
		
		private string _PasswordQuestion = default(string);
		
		private string _PasswordAnswer;
		
		private string _Email;
		
		private string _Comment;
		
		private bool _Locked;
		
		private EntitySet<HeuristicLabUserRole> _HeuristicLabUserRole;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnLockedChanging(bool value);
    partial void OnLockedChanged();
    #endregion
		
		public HeuristicLabUser()
		{
			this.Initialize();
		}
		
		[Column(Name="id", Storage="_id", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public long ID
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public virtual string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_LastPasswordChangedDate", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public virtual System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordQuestion", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public virtual string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordAnswer", CanBeNull=false)]
		[DataMember(Order=6)]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_Email", CanBeNull=false)]
		[DataMember(Order=7)]
		public virtual string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", CanBeNull=false)]
		[DataMember(Order=8)]
		public virtual string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_Locked")]
		[DataMember(Order=9)]
		public bool Locked
		{
			get
			{
				return this._Locked;
			}
			set
			{
				if ((this._Locked != value))
				{
					this.OnLockedChanging(value);
					this.SendPropertyChanging();
					this._Locked = value;
					this.SendPropertyChanged("Locked");
					this.OnLockedChanged();
				}
			}
		}
		
		[Association(Name="HeuristicLabUser_HeuristicLabUserRole", Storage="_HeuristicLabUserRole", ThisKey="ID", OtherKey="HeuristicLabUserID")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<HeuristicLabUserRole> HeuristicLabUserRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._HeuristicLabUserRole.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._HeuristicLabUserRole;
			}
			set
			{
				this._HeuristicLabUserRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HeuristicLabUserRole(HeuristicLabUserRole entity)
		{
			this.SendPropertyChanging();
			entity.HeuristicLabUser = this;
		}
		
		private void detach_HeuristicLabUserRole(HeuristicLabUserRole entity)
		{
			this.SendPropertyChanging();
			entity.HeuristicLabUser = null;
		}
		
		private void Initialize()
		{
			this._HeuristicLabUserRole = new EntitySet<HeuristicLabUserRole>(new Action<HeuristicLabUserRole>(this.attach_HeuristicLabUserRole), new Action<HeuristicLabUserRole>(this.detach_HeuristicLabUserRole));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="")]
	[DataContract()]
	public partial class HeuristicLabRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID = default(long);
		
		private string _roleName;
		
		private System.Nullable<long> _parentRoleID;
		
		private bool _IsPermission;
		
		private EntitySet<HeuristicLabRole> _HeuristicLabRole2;
		
		private EntitySet<HeuristicLabUserRole> _HeuristicLabUserRole;
		
		private EntityRef<HeuristicLabRole> _HeuristicLabRole1;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnParentRoleIDChanging(System.Nullable<long> value);
    partial void OnParentRoleIDChanged();
    partial void OnIsPermissionChanging(bool value);
    partial void OnIsPermissionChanged();
    #endregion
		
		public HeuristicLabRole()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Name="roleName", Storage="_roleName", CanBeNull=false)]
		[DataMember(Order=2)]
		public string RoleName
		{
			get
			{
				return this._roleName;
			}
			set
			{
				if ((this._roleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._roleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[Column(Name="parentRoleID", Storage="_parentRoleID")]
		[DataMember(Order=3)]
		public System.Nullable<long> ParentRoleID
		{
			get
			{
				return this._parentRoleID;
			}
			set
			{
				if ((this._parentRoleID != value))
				{
					this.OnParentRoleIDChanging(value);
					this.SendPropertyChanging();
					this._parentRoleID = value;
					this.SendPropertyChanged("ParentRoleID");
					this.OnParentRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsPermission")]
		[DataMember(Order=4)]
		public bool IsPermission
		{
			get
			{
				return this._IsPermission;
			}
			set
			{
				if ((this._IsPermission != value))
				{
					this.OnIsPermissionChanging(value);
					this.SendPropertyChanging();
					this._IsPermission = value;
					this.SendPropertyChanged("IsPermission");
					this.OnIsPermissionChanged();
				}
			}
		}
		
		[Association(Name="HeuristicLabRole_HeuristicLabRole", Storage="_HeuristicLabRole2", ThisKey="ID", OtherKey="ParentRoleID")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<HeuristicLabRole> HeuristicLabRoleChilds
		{
			get
			{
				if ((this.serializing 
							&& (this._HeuristicLabRole2.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._HeuristicLabRole2;
			}
			set
			{
				this._HeuristicLabRole2.Assign(value);
			}
		}
		
		[Association(Name="HeuristicLabRole_HeuristicLabUserRole", Storage="_HeuristicLabUserRole", ThisKey="ID", OtherKey="HeuristicLabRoleID")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<HeuristicLabUserRole> HeuristicLabUserRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._HeuristicLabUserRole.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._HeuristicLabUserRole;
			}
			set
			{
				this._HeuristicLabUserRole.Assign(value);
			}
		}
		
		[Association(Name="HeuristicLabRole_HeuristicLabRole", Storage="_HeuristicLabRole1", ThisKey="ParentRoleID", OtherKey="ID", IsForeignKey=true)]
		public HeuristicLabRole HeuristicLabRoleParent
		{
			get
			{
				return this._HeuristicLabRole1.Entity;
			}
			set
			{
				HeuristicLabRole previousValue = this._HeuristicLabRole1.Entity;
				if (((previousValue != value) 
							|| (this._HeuristicLabRole1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HeuristicLabRole1.Entity = null;
						previousValue.HeuristicLabRoleChilds.Remove(this);
					}
					this._HeuristicLabRole1.Entity = value;
					if ((value != null))
					{
						value.HeuristicLabRoleChilds.Add(this);
						this._parentRoleID = value.ID;
					}
					else
					{
						this._parentRoleID = default(Nullable<long>);
					}
					this.SendPropertyChanged("HeuristicLabRoleParent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HeuristicLabRole2(HeuristicLabRole entity)
		{
			this.SendPropertyChanging();
			entity.HeuristicLabRoleParent = this;
		}
		
		private void detach_HeuristicLabRole2(HeuristicLabRole entity)
		{
			this.SendPropertyChanging();
			entity.HeuristicLabRoleParent = null;
		}
		
		private void attach_HeuristicLabUserRole(HeuristicLabUserRole entity)
		{
			this.SendPropertyChanging();
			entity.HeuristicLabRole = this;
		}
		
		private void detach_HeuristicLabUserRole(HeuristicLabUserRole entity)
		{
			this.SendPropertyChanging();
			entity.HeuristicLabRole = null;
		}
		
		private void Initialize()
		{
			this._HeuristicLabRole2 = new EntitySet<HeuristicLabRole>(new Action<HeuristicLabRole>(this.attach_HeuristicLabRole2), new Action<HeuristicLabRole>(this.detach_HeuristicLabRole2));
			this._HeuristicLabUserRole = new EntitySet<HeuristicLabUserRole>(new Action<HeuristicLabUserRole>(this.attach_HeuristicLabUserRole), new Action<HeuristicLabUserRole>(this.detach_HeuristicLabUserRole));
			this._HeuristicLabRole1 = default(EntityRef<HeuristicLabRole>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="")]
	[DataContract()]
	public partial class HeuristicLabUserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _HeuristicLabUserID;
		
		private long _HeuristicLabRoleID;
		
		private EntityRef<HeuristicLabUser> _HeuristicLabUser;
		
		private EntityRef<HeuristicLabRole> _HeuristicLabAbstractRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnHeuristicLabUserIDChanging(long value);
    partial void OnHeuristicLabUserIDChanged();
    partial void OnHeuristicLabRoleIDChanging(long value);
    partial void OnHeuristicLabRoleIDChanged();
    #endregion
		
		public HeuristicLabUserRole()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeuristicLabUserID")]
		[DataMember(Order=2)]
		public long HeuristicLabUserID
		{
			get
			{
				return this._HeuristicLabUserID;
			}
			set
			{
				if ((this._HeuristicLabUserID != value))
				{
					if (this._HeuristicLabUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeuristicLabUserIDChanging(value);
					this.SendPropertyChanging();
					this._HeuristicLabUserID = value;
					this.SendPropertyChanged("HeuristicLabUserID");
					this.OnHeuristicLabUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeuristicLabRoleID")]
		[DataMember(Order=3)]
		public long HeuristicLabRoleID
		{
			get
			{
				return this._HeuristicLabRoleID;
			}
			set
			{
				if ((this._HeuristicLabRoleID != value))
				{
					if (this._HeuristicLabAbstractRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeuristicLabRoleIDChanging(value);
					this.SendPropertyChanging();
					this._HeuristicLabRoleID = value;
					this.SendPropertyChanged("HeuristicLabRoleID");
					this.OnHeuristicLabRoleIDChanged();
				}
			}
		}
		
		[Association(Name="HeuristicLabUser_HeuristicLabUserRole", Storage="_HeuristicLabUser", ThisKey="HeuristicLabUserID", OtherKey="ID", IsForeignKey=true)]
		public HeuristicLabUser HeuristicLabUser
		{
			get
			{
				return this._HeuristicLabUser.Entity;
			}
			set
			{
				HeuristicLabUser previousValue = this._HeuristicLabUser.Entity;
				if (((previousValue != value) 
							|| (this._HeuristicLabUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HeuristicLabUser.Entity = null;
						previousValue.HeuristicLabUserRoles.Remove(this);
					}
					this._HeuristicLabUser.Entity = value;
					if ((value != null))
					{
						value.HeuristicLabUserRoles.Add(this);
						this._HeuristicLabUserID = value.ID;
					}
					else
					{
						this._HeuristicLabUserID = default(long);
					}
					this.SendPropertyChanged("HeuristicLabUser");
				}
			}
		}
		
		[Association(Name="HeuristicLabRole_HeuristicLabUserRole", Storage="_HeuristicLabAbstractRole", ThisKey="HeuristicLabRoleID", OtherKey="ID", IsForeignKey=true)]
		public HeuristicLabRole HeuristicLabRole
		{
			get
			{
				return this._HeuristicLabAbstractRole.Entity;
			}
			set
			{
				HeuristicLabRole previousValue = this._HeuristicLabAbstractRole.Entity;
				if (((previousValue != value) 
							|| (this._HeuristicLabAbstractRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HeuristicLabAbstractRole.Entity = null;
						previousValue.HeuristicLabUserRoles.Remove(this);
					}
					this._HeuristicLabAbstractRole.Entity = value;
					if ((value != null))
					{
						value.HeuristicLabUserRoles.Add(this);
						this._HeuristicLabRoleID = value.ID;
					}
					else
					{
						this._HeuristicLabRoleID = default(long);
					}
					this.SendPropertyChanged("HeuristicLabRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._HeuristicLabUser = default(EntityRef<HeuristicLabUser>);
			this._HeuristicLabAbstractRole = default(EntityRef<HeuristicLabRole>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
}
#pragma warning restore 1591
