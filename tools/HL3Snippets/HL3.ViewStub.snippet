<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>HL3.ViewStub</Title>
      <Author>Andreas Beham</Author>
      <Description>Creates a stub implementation of a view</Description>
      <HelpUrl>https://dev.heuristiclab.com/trac/hl/core/wiki/DevelopersCodeSnippets</HelpUrl>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords />
      <Shortcut>hl3ViewClass</Shortcut>
    </Header>
    <Snippet>
      <References />
      <Imports />
      <Declarations>
        <Literal Editable="true">
          <ID>ViewName</ID>
          <Type></Type>
          <ToolTip>Name of the view</ToolTip>
          <Default>My Great View</Default>
          <Function></Function>
        </Literal>
        <Literal Editable="true">
          <ID>ContentType</ID>
          <Type></Type>
          <ToolTip>Type of the content to view</ToolTip>
          <Default>YourModelClassName</Default>
          <Function></Function>
        </Literal>
        <Literal Editable="true">
          <ID>DefaultView</ID>
          <Type></Type>
          <ToolTip>True if the view is the default view for the given content type. Beware: There can only be one default view per content type!</ToolTip>
          <Default>false</Default>
          <Function></Function>
        </Literal>
        <Literal Editable="true">
          <ID>BaseView</ID>
          <Type></Type>
          <ToolTip>The base class for this view to derive from</ToolTip>
          <Default>NamedItemView</Default>
          <Function></Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Kind="" Delimiter="$"><![CDATA[[View("$ViewName$")]
[Content(typeof($ContentType$), IsDefaultView = $DefaultView$)]
public sealed partial class $ContentType$View : $BaseView$ {
	public new $ContentType$ Content {
		get { return ($ContentType$)base.Content; }
		set { base.Content = value; }
	}

	public $ContentType$View() {
		InitializeComponent();
	}

	protected override void DeregisterContentEvents() {
		// TODO: Deregister your event handlers here
		base.DeregisterContentEvents();
    }

	protected override void RegisterContentEvents() {
		base.RegisterContentEvents();
		// TODO: Register your event handlers here
    }

    #region Event Handlers (Content)
    // TODO: Put event handlers of the content here
    #endregion

	protected override void OnContentChanged() {
		base.OnContentChanged();
		if (Content == null) {
       		// TODO: Add code when content has been changed and is null
		} else {
        	// TODO: Add code when content has been changed and is not null
		}
    }


    protected override void SetEnabledStateOfControls() {
		base.SetEnabledStateOfControls();
		// TODO: Enable or disable controls based on whether the content is null or the view is set readonly
    }

    #region Event Handlers (child controls)
    // TODO: Put event handlers of child controls here.
    #endregion
}]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>